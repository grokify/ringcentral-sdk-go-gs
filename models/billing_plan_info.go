package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BillingPlanInfo billing plan info
// swagger:model BillingPlanInfo
type BillingPlanInfo struct {

	// Number of duration units
	Duration string `json:"duration,omitempty"`

	// Duration period
	DurationUnit string `json:"durationUnit,omitempty"`

	// Internal identifier of a billing plan
	ID string `json:"id,omitempty"`

	// Billing plan name
	Name string `json:"name,omitempty"`

	// Billing plan type
	Type string `json:"type,omitempty"`
}

// Validate validates this billing plan info
func (m *BillingPlanInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDurationUnit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var billingPlanInfoTypeDurationUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Month","Day"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		billingPlanInfoTypeDurationUnitPropEnum = append(billingPlanInfoTypeDurationUnitPropEnum, v)
	}
}

const (
	// BillingPlanInfoDurationUnitMonth captures enum value "Month"
	BillingPlanInfoDurationUnitMonth string = "Month"
	// BillingPlanInfoDurationUnitDay captures enum value "Day"
	BillingPlanInfoDurationUnitDay string = "Day"
)

// prop value enum
func (m *BillingPlanInfo) validateDurationUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, billingPlanInfoTypeDurationUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BillingPlanInfo) validateDurationUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.DurationUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateDurationUnitEnum("durationUnit", "body", m.DurationUnit); err != nil {
		return err
	}

	return nil
}

var billingPlanInfoTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Initial","Regular","Suspended","Trial","TrialNoCC","Free"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		billingPlanInfoTypeTypePropEnum = append(billingPlanInfoTypeTypePropEnum, v)
	}
}

const (
	// BillingPlanInfoTypeInitial captures enum value "Initial"
	BillingPlanInfoTypeInitial string = "Initial"
	// BillingPlanInfoTypeRegular captures enum value "Regular"
	BillingPlanInfoTypeRegular string = "Regular"
	// BillingPlanInfoTypeSuspended captures enum value "Suspended"
	BillingPlanInfoTypeSuspended string = "Suspended"
	// BillingPlanInfoTypeTrial captures enum value "Trial"
	BillingPlanInfoTypeTrial string = "Trial"
	// BillingPlanInfoTypeTrialNoCC captures enum value "TrialNoCC"
	BillingPlanInfoTypeTrialNoCC string = "TrialNoCC"
	// BillingPlanInfoTypeFree captures enum value "Free"
	BillingPlanInfoTypeFree string = "Free"
)

// prop value enum
func (m *BillingPlanInfo) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, billingPlanInfoTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BillingPlanInfo) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
