package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DetailedPresencewithSIPEvent detailed presencewith s IP event
// swagger:model DetailedPresencewithSIPEvent
type DetailedPresencewithSIPEvent struct {

	// Information on active calls
	ActiveCalls []*DetailedPresencewithSIPEventActiveCallInfo `json:"activeCalls"`

	// If 'True' enables other extensions to see the extension presence status
	AllowSeeMyPresence bool `json:"allowSeeMyPresence,omitempty"`

	// Extended DnD (Do not Disturb) status
	DndStatus string `json:"dndStatus,omitempty"`

	// Internal identifier of an extension. Optional parameter
	ExtensionID *string `json:"extensionId,omitempty"`

	// If 'True' enables the extension user to pick up a monitored line on hold
	PickUpCallsOnHold bool `json:"pickUpCallsOnHold,omitempty"`

	// Aggregated presence status, calculated from a number of sources
	PresenceStatus string `json:"presenceStatus,omitempty"`

	// If 'True' enables to ring extension phone, if any user monitored by this extension is ringing
	RingOnMonitoredCall bool `json:"ringOnMonitoredCall,omitempty"`

	// Order number of a notification to state the chronology
	Sequence int64 `json:"sequence,omitempty"`

	// Telephony presence status. Returned if telephony status is changed. See Telephony Status Values
	TelephonyStatus string `json:"telephonyStatus,omitempty"`

	// Type of call termination. Supported for calls in 'NoCall' status. If the returned termination type is 'Intermediate' it means the call is not actually ended, the connection is established on one of the devices
	TerminationType string `json:"terminationType,omitempty"`

	// User-defined presence status (as previously published by the user)
	UserStatus string `json:"userStatus,omitempty"`
}

// Validate validates this detailed presencewith s IP event
func (m *DetailedPresencewithSIPEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveCalls(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDndStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePresenceStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTelephonyStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTerminationType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetailedPresencewithSIPEvent) validateActiveCalls(formats strfmt.Registry) error {

	if swag.IsZero(m.ActiveCalls) { // not required
		return nil
	}

	for i := 0; i < len(m.ActiveCalls); i++ {

		if swag.IsZero(m.ActiveCalls[i]) { // not required
			continue
		}

		if m.ActiveCalls[i] != nil {

			if err := m.ActiveCalls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activeCalls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var detailedPresencewithSIpEventTypeDndStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TakeAllCalls","DoNotAcceptAnyCalls","DoNotAcceptDepartmentCalls","TakeDepartmentCallsOnly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		detailedPresencewithSIpEventTypeDndStatusPropEnum = append(detailedPresencewithSIpEventTypeDndStatusPropEnum, v)
	}
}

const (
	// DetailedPresencewithSIPEventDndStatusTakeAllCalls captures enum value "TakeAllCalls"
	DetailedPresencewithSIPEventDndStatusTakeAllCalls string = "TakeAllCalls"
	// DetailedPresencewithSIPEventDndStatusDoNotAcceptAnyCalls captures enum value "DoNotAcceptAnyCalls"
	DetailedPresencewithSIPEventDndStatusDoNotAcceptAnyCalls string = "DoNotAcceptAnyCalls"
	// DetailedPresencewithSIPEventDndStatusDoNotAcceptDepartmentCalls captures enum value "DoNotAcceptDepartmentCalls"
	DetailedPresencewithSIPEventDndStatusDoNotAcceptDepartmentCalls string = "DoNotAcceptDepartmentCalls"
	// DetailedPresencewithSIPEventDndStatusTakeDepartmentCallsOnly captures enum value "TakeDepartmentCallsOnly"
	DetailedPresencewithSIPEventDndStatusTakeDepartmentCallsOnly string = "TakeDepartmentCallsOnly"
)

// prop value enum
func (m *DetailedPresencewithSIPEvent) validateDndStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, detailedPresencewithSIpEventTypeDndStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DetailedPresencewithSIPEvent) validateDndStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.DndStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateDndStatusEnum("dndStatus", "body", m.DndStatus); err != nil {
		return err
	}

	return nil
}

var detailedPresencewithSIpEventTypePresenceStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Offline","Busy","Available"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		detailedPresencewithSIpEventTypePresenceStatusPropEnum = append(detailedPresencewithSIpEventTypePresenceStatusPropEnum, v)
	}
}

const (
	// DetailedPresencewithSIPEventPresenceStatusOffline captures enum value "Offline"
	DetailedPresencewithSIPEventPresenceStatusOffline string = "Offline"
	// DetailedPresencewithSIPEventPresenceStatusBusy captures enum value "Busy"
	DetailedPresencewithSIPEventPresenceStatusBusy string = "Busy"
	// DetailedPresencewithSIPEventPresenceStatusAvailable captures enum value "Available"
	DetailedPresencewithSIPEventPresenceStatusAvailable string = "Available"
)

// prop value enum
func (m *DetailedPresencewithSIPEvent) validatePresenceStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, detailedPresencewithSIpEventTypePresenceStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DetailedPresencewithSIPEvent) validatePresenceStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.PresenceStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validatePresenceStatusEnum("presenceStatus", "body", m.PresenceStatus); err != nil {
		return err
	}

	return nil
}

var detailedPresencewithSIpEventTypeTelephonyStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NoCall","CallConnected","Ringing","OnHold","ParkedCall"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		detailedPresencewithSIpEventTypeTelephonyStatusPropEnum = append(detailedPresencewithSIpEventTypeTelephonyStatusPropEnum, v)
	}
}

const (
	// DetailedPresencewithSIPEventTelephonyStatusNoCall captures enum value "NoCall"
	DetailedPresencewithSIPEventTelephonyStatusNoCall string = "NoCall"
	// DetailedPresencewithSIPEventTelephonyStatusCallConnected captures enum value "CallConnected"
	DetailedPresencewithSIPEventTelephonyStatusCallConnected string = "CallConnected"
	// DetailedPresencewithSIPEventTelephonyStatusRinging captures enum value "Ringing"
	DetailedPresencewithSIPEventTelephonyStatusRinging string = "Ringing"
	// DetailedPresencewithSIPEventTelephonyStatusOnHold captures enum value "OnHold"
	DetailedPresencewithSIPEventTelephonyStatusOnHold string = "OnHold"
	// DetailedPresencewithSIPEventTelephonyStatusParkedCall captures enum value "ParkedCall"
	DetailedPresencewithSIPEventTelephonyStatusParkedCall string = "ParkedCall"
)

// prop value enum
func (m *DetailedPresencewithSIPEvent) validateTelephonyStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, detailedPresencewithSIpEventTypeTelephonyStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DetailedPresencewithSIPEvent) validateTelephonyStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.TelephonyStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateTelephonyStatusEnum("telephonyStatus", "body", m.TelephonyStatus); err != nil {
		return err
	}

	return nil
}

var detailedPresencewithSIpEventTypeTerminationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Final","Intermediate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		detailedPresencewithSIpEventTypeTerminationTypePropEnum = append(detailedPresencewithSIpEventTypeTerminationTypePropEnum, v)
	}
}

const (
	// DetailedPresencewithSIPEventTerminationTypeFinal captures enum value "Final"
	DetailedPresencewithSIPEventTerminationTypeFinal string = "Final"
	// DetailedPresencewithSIPEventTerminationTypeIntermediate captures enum value "Intermediate"
	DetailedPresencewithSIPEventTerminationTypeIntermediate string = "Intermediate"
)

// prop value enum
func (m *DetailedPresencewithSIPEvent) validateTerminationTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, detailedPresencewithSIpEventTypeTerminationTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DetailedPresencewithSIPEvent) validateTerminationType(formats strfmt.Registry) error {

	if swag.IsZero(m.TerminationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTerminationTypeEnum("terminationType", "body", m.TerminationType); err != nil {
		return err
	}

	return nil
}

var detailedPresencewithSIpEventTypeUserStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Offline","Busy","Available"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		detailedPresencewithSIpEventTypeUserStatusPropEnum = append(detailedPresencewithSIpEventTypeUserStatusPropEnum, v)
	}
}

const (
	// DetailedPresencewithSIPEventUserStatusOffline captures enum value "Offline"
	DetailedPresencewithSIPEventUserStatusOffline string = "Offline"
	// DetailedPresencewithSIPEventUserStatusBusy captures enum value "Busy"
	DetailedPresencewithSIPEventUserStatusBusy string = "Busy"
	// DetailedPresencewithSIPEventUserStatusAvailable captures enum value "Available"
	DetailedPresencewithSIPEventUserStatusAvailable string = "Available"
)

// prop value enum
func (m *DetailedPresencewithSIPEvent) validateUserStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, detailedPresencewithSIpEventTypeUserStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DetailedPresencewithSIPEvent) validateUserStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.UserStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserStatusEnum("userStatus", "body", m.UserStatus); err != nil {
		return err
	}

	return nil
}
