package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecordingInfo recording info
// swagger:model RecordingInfo
type RecordingInfo struct {

	// Link to the call recording binary content
	ContentURI string `json:"contentUri,omitempty"`

	// Internal identifier of the call recording
	ID string `json:"id,omitempty"`

	// Indicates recording mode used
	Type string `json:"type,omitempty"`

	// Link to the call recording metadata resource
	URI string `json:"uri,omitempty"`
}

// Validate validates this recording info
func (m *RecordingInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var recordingInfoTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Automatic","OnDemand"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recordingInfoTypeTypePropEnum = append(recordingInfoTypeTypePropEnum, v)
	}
}

const (
	// RecordingInfoTypeAutomatic captures enum value "Automatic"
	RecordingInfoTypeAutomatic string = "Automatic"
	// RecordingInfoTypeOnDemand captures enum value "OnDemand"
	RecordingInfoTypeOnDemand string = "OnDemand"
)

// prop value enum
func (m *RecordingInfo) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, recordingInfoTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RecordingInfo) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
