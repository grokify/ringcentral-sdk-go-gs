package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExtensionInfoRequestProvision extension info request provision
// swagger:model ExtensionInfo.Request.Provision
type ExtensionInfoRequestProvision struct {

	// Mandatory. Extension user contact information
	Contact *ExtensionInfoRequestProvisionContactInfo `json:"contact,omitempty"`

	// Mandatory. Resulting extension status
	Status string `json:"status,omitempty"`
}

// Validate validates this extension info request provision
func (m *ExtensionInfoRequestProvision) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContact(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtensionInfoRequestProvision) validateContact(formats strfmt.Registry) error {

	if swag.IsZero(m.Contact) { // not required
		return nil
	}

	if m.Contact != nil {

		if err := m.Contact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact")
			}
			return err
		}
	}

	return nil
}

var extensionInfoRequestProvisionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotActivated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		extensionInfoRequestProvisionTypeStatusPropEnum = append(extensionInfoRequestProvisionTypeStatusPropEnum, v)
	}
}

const (
	// ExtensionInfoRequestProvisionStatusNotActivated captures enum value "NotActivated"
	ExtensionInfoRequestProvisionStatusNotActivated string = "NotActivated"
)

// prop value enum
func (m *ExtensionInfoRequestProvision) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, extensionInfoRequestProvisionTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExtensionInfoRequestProvision) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}
