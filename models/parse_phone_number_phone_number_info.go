package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ParsePhoneNumberPhoneNumberInfo parse phone number phone number info
// swagger:model ParsePhoneNumber.PhoneNumberInfo
type ParsePhoneNumberPhoneNumberInfo struct {

	// Area code of the location (3-digit usually), according to the NANP number format, that can be summarized as NPA-NXX-xxxx and covers Canada, the United States, parts of the Caribbean Sea, and some Atlantic and Pacific islands. See North American Numbering Plan for details
	AreaCode string `json:"areaCode,omitempty"`

	// Information on a country the phone number belongs to
	Country []*ParsePhoneNumberCountryInfo `json:"country"`

	// Dialing format of a phone number
	Dialable string `json:"dialable,omitempty"`

	// E.164 (11-digits) format of a phone number
	E164 string `json:"e164,omitempty"`

	// International format of a phone number
	FormattedInternational string `json:"formattedInternational,omitempty"`

	// Domestic format of a phone number
	FormattedNational string `json:"formattedNational,omitempty"`

	// E.164 (11-digits) format of a phone number without the plus sign ('+')
	Normalized string `json:"normalized,omitempty"`

	// One of the numbers to be parsed, passed as a string in response
	OriginalString string `json:"originalString,omitempty"`

	// "True" if the number is in a special format (for example N11 code)
	Special bool `json:"special,omitempty"`
}

// Validate validates this parse phone number phone number info
func (m *ParsePhoneNumberPhoneNumberInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParsePhoneNumberPhoneNumberInfo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	for i := 0; i < len(m.Country); i++ {

		if swag.IsZero(m.Country[i]) { // not required
			continue
		}

		if m.Country[i] != nil {

			if err := m.Country[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("country" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}
