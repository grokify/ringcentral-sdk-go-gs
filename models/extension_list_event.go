package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExtensionListEvent extension list event
// swagger:model ExtensionListEvent
type ExtensionListEvent struct {

	// Type of extension info change
	EventType string `json:"eventType,omitempty"`

	// Internal identifier of an extension
	ExtensionID *string `json:"extensionId,omitempty"`
}

// Validate validates this extension list event
func (m *ExtensionListEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var extensionListEventTypeEventTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Create","Update","Delete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		extensionListEventTypeEventTypePropEnum = append(extensionListEventTypeEventTypePropEnum, v)
	}
}

const (
	// ExtensionListEventEventTypeCreate captures enum value "Create"
	ExtensionListEventEventTypeCreate string = "Create"
	// ExtensionListEventEventTypeUpdate captures enum value "Update"
	ExtensionListEventEventTypeUpdate string = "Update"
	// ExtensionListEventEventTypeDelete captures enum value "Delete"
	ExtensionListEventEventTypeDelete string = "Delete"
)

// prop value enum
func (m *ExtensionListEvent) validateEventTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, extensionListEventTypeEventTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExtensionListEvent) validateEventType(formats strfmt.Registry) error {

	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEventTypeEnum("eventType", "body", m.EventType); err != nil {
		return err
	}

	return nil
}
