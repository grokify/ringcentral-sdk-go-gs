package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReservePhoneNumberResponseReserveRecord reserve phone number response reserve record
// swagger:model ReservePhoneNumber.Response.ReserveRecord
type ReservePhoneNumberResponseReserveRecord struct {

	// The error code in case of reservation/un-reservation failure
	Error string `json:"error,omitempty"`

	// Domestic format of a phone number
	FormattedNumber string `json:"formattedNumber,omitempty"`

	// Phone number in E.164 format without a '+'
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Internal identifier of phone number reservation; encoded data including reservation type (by brand, by account, by session), particular brand/account/session data, and reservation date and time
	ReservationID string `json:"reservationId,omitempty"`

	// The datetime up to which the number is reserved in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. No value means that number is not reserved anymore
	ReservedTill strfmt.DateTime `json:"reservedTill,omitempty"`

	// Phone number status
	Status string `json:"status,omitempty"`
}

// Validate validates this reserve phone number response reserve record
func (m *ReservePhoneNumberResponseReserveRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var reservePhoneNumberResponseReserveRecordTypeErrorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NumberIsAlreadyProvisioned","NumberReserved","NumberNotAvailable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reservePhoneNumberResponseReserveRecordTypeErrorPropEnum = append(reservePhoneNumberResponseReserveRecordTypeErrorPropEnum, v)
	}
}

const (
	// ReservePhoneNumberResponseReserveRecordErrorNumberIsAlreadyProvisioned captures enum value "NumberIsAlreadyProvisioned"
	ReservePhoneNumberResponseReserveRecordErrorNumberIsAlreadyProvisioned string = "NumberIsAlreadyProvisioned"
	// ReservePhoneNumberResponseReserveRecordErrorNumberReserved captures enum value "NumberReserved"
	ReservePhoneNumberResponseReserveRecordErrorNumberReserved string = "NumberReserved"
	// ReservePhoneNumberResponseReserveRecordErrorNumberNotAvailable captures enum value "NumberNotAvailable"
	ReservePhoneNumberResponseReserveRecordErrorNumberNotAvailable string = "NumberNotAvailable"
)

// prop value enum
func (m *ReservePhoneNumberResponseReserveRecord) validateErrorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, reservePhoneNumberResponseReserveRecordTypeErrorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ReservePhoneNumberResponseReserveRecord) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	// value enum
	if err := m.validateErrorEnum("error", "body", m.Error); err != nil {
		return err
	}

	return nil
}

var reservePhoneNumberResponseReserveRecordTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Enabled","Pending","Disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reservePhoneNumberResponseReserveRecordTypeStatusPropEnum = append(reservePhoneNumberResponseReserveRecordTypeStatusPropEnum, v)
	}
}

const (
	// ReservePhoneNumberResponseReserveRecordStatusEnabled captures enum value "Enabled"
	ReservePhoneNumberResponseReserveRecordStatusEnabled string = "Enabled"
	// ReservePhoneNumberResponseReserveRecordStatusPending captures enum value "Pending"
	ReservePhoneNumberResponseReserveRecordStatusPending string = "Pending"
	// ReservePhoneNumberResponseReserveRecordStatusDisabled captures enum value "Disabled"
	ReservePhoneNumberResponseReserveRecordStatusDisabled string = "Disabled"
)

// prop value enum
func (m *ReservePhoneNumberResponseReserveRecord) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, reservePhoneNumberResponseReserveRecordTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ReservePhoneNumberResponseReserveRecord) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}
