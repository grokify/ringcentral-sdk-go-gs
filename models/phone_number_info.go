package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PhoneNumberInfo phone number info
// swagger:model PhoneNumberInfo
type PhoneNumberInfo struct {

	// Brief information on a phone number country
	Country *CountryInfo `json:"country,omitempty"`

	// Information on the extension, to which the phone number is assigned. Returned only for the request of Account phone number list
	Extension *PhoneNumberInfoExtensionInfo `json:"extension,omitempty"`

	// Indicates if this phone number is enabled to appear as CallerId and/or to send outbound SMS from it. Returned only for the request of Extension phone number list
	Features []string `json:"features"`

	// Internal identifier of a phone number
	ID string `json:"id,omitempty"`

	// Location (City, State). Filled for local US numbers
	Location string `json:"location,omitempty"`

	// Payment type. 'External' is returned for forwarded numbers which are not terminated in the RingCentral phone system
	PaymentType string `json:"paymentType,omitempty"`

	// Phone number
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Status of a phone number. If the value is 'Normal', the phone number is ready to be used. Otherwise it is an external number not yet ported to RingCentral
	Status string `json:"status,omitempty"`

	// Phone number type
	Type string `json:"type,omitempty"`

	// Usage type of the phone number
	UsageType string `json:"usageType,omitempty"`
}

// Validate validates this phone number info
func (m *PhoneNumberInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExtension(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePaymentType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsageType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhoneNumberInfo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if m.Country != nil {

		if err := m.Country.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("country")
			}
			return err
		}
	}

	return nil
}

func (m *PhoneNumberInfo) validateExtension(formats strfmt.Registry) error {

	if swag.IsZero(m.Extension) { // not required
		return nil
	}

	if m.Extension != nil {

		if err := m.Extension.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension")
			}
			return err
		}
	}

	return nil
}

func (m *PhoneNumberInfo) validateFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Features) { // not required
		return nil
	}

	return nil
}

var phoneNumberInfoTypePaymentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["External","TollFree","Local"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		phoneNumberInfoTypePaymentTypePropEnum = append(phoneNumberInfoTypePaymentTypePropEnum, v)
	}
}

const (
	// PhoneNumberInfoPaymentTypeExternal captures enum value "External"
	PhoneNumberInfoPaymentTypeExternal string = "External"
	// PhoneNumberInfoPaymentTypeTollFree captures enum value "TollFree"
	PhoneNumberInfoPaymentTypeTollFree string = "TollFree"
	// PhoneNumberInfoPaymentTypeLocal captures enum value "Local"
	PhoneNumberInfoPaymentTypeLocal string = "Local"
)

// prop value enum
func (m *PhoneNumberInfo) validatePaymentTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, phoneNumberInfoTypePaymentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PhoneNumberInfo) validatePaymentType(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePaymentTypeEnum("paymentType", "body", m.PaymentType); err != nil {
		return err
	}

	return nil
}

var phoneNumberInfoTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VoiceFax","FaxOnly","VoiceOnly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		phoneNumberInfoTypeTypePropEnum = append(phoneNumberInfoTypeTypePropEnum, v)
	}
}

const (
	// PhoneNumberInfoTypeVoiceFax captures enum value "VoiceFax"
	PhoneNumberInfoTypeVoiceFax string = "VoiceFax"
	// PhoneNumberInfoTypeFaxOnly captures enum value "FaxOnly"
	PhoneNumberInfoTypeFaxOnly string = "FaxOnly"
	// PhoneNumberInfoTypeVoiceOnly captures enum value "VoiceOnly"
	PhoneNumberInfoTypeVoiceOnly string = "VoiceOnly"
)

// prop value enum
func (m *PhoneNumberInfo) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, phoneNumberInfoTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PhoneNumberInfo) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

var phoneNumberInfoTypeUsageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MainCompanyNumber","AdditionalCompanyNumber","CompanyNumber","DirectNumber","CompanyFaxNumber","ForwardedNumber"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		phoneNumberInfoTypeUsageTypePropEnum = append(phoneNumberInfoTypeUsageTypePropEnum, v)
	}
}

const (
	// PhoneNumberInfoUsageTypeMainCompanyNumber captures enum value "MainCompanyNumber"
	PhoneNumberInfoUsageTypeMainCompanyNumber string = "MainCompanyNumber"
	// PhoneNumberInfoUsageTypeAdditionalCompanyNumber captures enum value "AdditionalCompanyNumber"
	PhoneNumberInfoUsageTypeAdditionalCompanyNumber string = "AdditionalCompanyNumber"
	// PhoneNumberInfoUsageTypeCompanyNumber captures enum value "CompanyNumber"
	PhoneNumberInfoUsageTypeCompanyNumber string = "CompanyNumber"
	// PhoneNumberInfoUsageTypeDirectNumber captures enum value "DirectNumber"
	PhoneNumberInfoUsageTypeDirectNumber string = "DirectNumber"
	// PhoneNumberInfoUsageTypeCompanyFaxNumber captures enum value "CompanyFaxNumber"
	PhoneNumberInfoUsageTypeCompanyFaxNumber string = "CompanyFaxNumber"
	// PhoneNumberInfoUsageTypeForwardedNumber captures enum value "ForwardedNumber"
	PhoneNumberInfoUsageTypeForwardedNumber string = "ForwardedNumber"
)

// prop value enum
func (m *PhoneNumberInfo) validateUsageTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, phoneNumberInfoTypeUsageTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PhoneNumberInfo) validateUsageType(formats strfmt.Registry) error {

	if swag.IsZero(m.UsageType) { // not required
		return nil
	}

	// value enum
	if err := m.validateUsageTypeEnum("usageType", "body", m.UsageType); err != nil {
		return err
	}

	return nil
}
