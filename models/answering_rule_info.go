package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnsweringRuleInfo answering rule info
// swagger:model AnsweringRuleInfo
type AnsweringRuleInfo struct {

	// Specifies how incoming calls are forwarded
	CallHandlingAction string `json:"callHandlingAction,omitempty"`

	// Answering rules are applied when calling to selected number(s)
	CalledNumbers []*AnsweringRuleInfoCalleeInfo `json:"calledNumbers"`

	// Answering rules are applied when calls are received from specified caller(s)
	Callers []*AnsweringRuleInfoCallerInfo `json:"callers"`

	// Specifies if an answering rule is active or inactive
	Enabled bool `json:"enabled,omitempty"`

	// Forwarding parameters. Returned if 'ForwardCalls' is specified in 'callHandlingAction'. These settings determine the forwarding numbers to which the call will be forwarded
	Forwarding *ForwardingInfo `json:"forwarding,omitempty"`

	// Predefined greetings applied for an answering rule
	Greetings []*GreetingInfo `json:"greetings"`

	// Internal identifier of an asnwering rule
	ID string `json:"id,omitempty"`

	// Name of an answering rule specified by user
	Name string `json:"name,omitempty"`

	// Schedule when an answering rule should be applied
	Schedule *ScheduleInfo `json:"schedule,omitempty"`

	// Type of an answering rule
	Type string `json:"type,omitempty"`

	// Unconditional forwarding parameters. Returned if 'UnconditionalForwarding' is specified in 'callHandlingAction'
	UnconditionalForwarding *UnconditionalForwardingInfo `json:"unconditionalForwarding,omitempty"`

	// Canonical URI to the answering rule resource
	URI string `json:"uri,omitempty"`

	// Specifies whether to take a voicemail and who should do it
	Voicemail *VoicemailInfo `json:"voicemail,omitempty"`
}

// Validate validates this answering rule info
func (m *AnsweringRuleInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallHandlingAction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCalledNumbers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCallers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateForwarding(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGreetings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUnconditionalForwarding(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVoicemail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var answeringRuleInfoTypeCallHandlingActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ForwardCalls","TakeMessagesOnly","PlayAnnouncementOnly","UnconditionalForwarding"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		answeringRuleInfoTypeCallHandlingActionPropEnum = append(answeringRuleInfoTypeCallHandlingActionPropEnum, v)
	}
}

const (
	// AnsweringRuleInfoCallHandlingActionForwardCalls captures enum value "ForwardCalls"
	AnsweringRuleInfoCallHandlingActionForwardCalls string = "ForwardCalls"
	// AnsweringRuleInfoCallHandlingActionTakeMessagesOnly captures enum value "TakeMessagesOnly"
	AnsweringRuleInfoCallHandlingActionTakeMessagesOnly string = "TakeMessagesOnly"
	// AnsweringRuleInfoCallHandlingActionPlayAnnouncementOnly captures enum value "PlayAnnouncementOnly"
	AnsweringRuleInfoCallHandlingActionPlayAnnouncementOnly string = "PlayAnnouncementOnly"
	// AnsweringRuleInfoCallHandlingActionUnconditionalForwarding captures enum value "UnconditionalForwarding"
	AnsweringRuleInfoCallHandlingActionUnconditionalForwarding string = "UnconditionalForwarding"
)

// prop value enum
func (m *AnsweringRuleInfo) validateCallHandlingActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, answeringRuleInfoTypeCallHandlingActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AnsweringRuleInfo) validateCallHandlingAction(formats strfmt.Registry) error {

	if swag.IsZero(m.CallHandlingAction) { // not required
		return nil
	}

	// value enum
	if err := m.validateCallHandlingActionEnum("callHandlingAction", "body", m.CallHandlingAction); err != nil {
		return err
	}

	return nil
}

func (m *AnsweringRuleInfo) validateCalledNumbers(formats strfmt.Registry) error {

	if swag.IsZero(m.CalledNumbers) { // not required
		return nil
	}

	for i := 0; i < len(m.CalledNumbers); i++ {

		if swag.IsZero(m.CalledNumbers[i]) { // not required
			continue
		}

		if m.CalledNumbers[i] != nil {

			if err := m.CalledNumbers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("calledNumbers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AnsweringRuleInfo) validateCallers(formats strfmt.Registry) error {

	if swag.IsZero(m.Callers) { // not required
		return nil
	}

	for i := 0; i < len(m.Callers); i++ {

		if swag.IsZero(m.Callers[i]) { // not required
			continue
		}

		if m.Callers[i] != nil {

			if err := m.Callers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("callers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AnsweringRuleInfo) validateForwarding(formats strfmt.Registry) error {

	if swag.IsZero(m.Forwarding) { // not required
		return nil
	}

	if m.Forwarding != nil {

		if err := m.Forwarding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forwarding")
			}
			return err
		}
	}

	return nil
}

func (m *AnsweringRuleInfo) validateGreetings(formats strfmt.Registry) error {

	if swag.IsZero(m.Greetings) { // not required
		return nil
	}

	for i := 0; i < len(m.Greetings); i++ {

		if swag.IsZero(m.Greetings[i]) { // not required
			continue
		}

		if m.Greetings[i] != nil {

			if err := m.Greetings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("greetings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AnsweringRuleInfo) validateSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {

		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

var answeringRuleInfoTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BusinessHours","AfterHours","Custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		answeringRuleInfoTypeTypePropEnum = append(answeringRuleInfoTypeTypePropEnum, v)
	}
}

const (
	// AnsweringRuleInfoTypeBusinessHours captures enum value "BusinessHours"
	AnsweringRuleInfoTypeBusinessHours string = "BusinessHours"
	// AnsweringRuleInfoTypeAfterHours captures enum value "AfterHours"
	AnsweringRuleInfoTypeAfterHours string = "AfterHours"
	// AnsweringRuleInfoTypeCustom captures enum value "Custom"
	AnsweringRuleInfoTypeCustom string = "Custom"
)

// prop value enum
func (m *AnsweringRuleInfo) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, answeringRuleInfoTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AnsweringRuleInfo) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *AnsweringRuleInfo) validateUnconditionalForwarding(formats strfmt.Registry) error {

	if swag.IsZero(m.UnconditionalForwarding) { // not required
		return nil
	}

	if m.UnconditionalForwarding != nil {

		if err := m.UnconditionalForwarding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unconditionalForwarding")
			}
			return err
		}
	}

	return nil
}

func (m *AnsweringRuleInfo) validateVoicemail(formats strfmt.Registry) error {

	if swag.IsZero(m.Voicemail) { // not required
		return nil
	}

	if m.Voicemail != nil {

		if err := m.Voicemail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("voicemail")
			}
			return err
		}
	}

	return nil
}
