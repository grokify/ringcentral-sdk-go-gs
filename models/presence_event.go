package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PresenceEvent presence event
// swagger:model PresenceEvent
type PresenceEvent struct {

	// If 'True' enables other extensions to see the extension presence status
	AllowSeeMyPresence bool `json:"allowSeeMyPresence,omitempty"`

	// Extended DnD (Do not Disturb) status
	DndStatus string `json:"dndStatus,omitempty"`

	// Internal identifier of an extension. Optional parameter
	ExtensionID *string `json:"extensionId,omitempty"`

	// If 'True' enables the extension user to pick up a monitored line on hold
	PickUpCallsOnHold bool `json:"pickUpCallsOnHold,omitempty"`

	// Aggregated presence status, calculated from a number of sources
	PresenceStatus string `json:"presenceStatus,omitempty"`

	// If 'True' enables to ring extension phone, if any user monitored by this extension is ringing
	RingOnMonitoredCall bool `json:"ringOnMonitoredCall,omitempty"`

	// Order number of a notification to state the chronology
	Sequence int64 `json:"sequence,omitempty"`

	// Telephony presence status. Returned if telephony status is changed. See Telephony Status Values
	TelephonyStatus string `json:"telephonyStatus,omitempty"`

	// Type of call termination. Supported for calls in 'NoCall' status. If the returned termination type is 'Intermediate' it means the call is not actually ended, the connection is established on one of the devices
	TerminationType string `json:"terminationType,omitempty"`

	// User-defined presence status (as previously published by the user)
	UserStatus string `json:"userStatus,omitempty"`
}

// Validate validates this presence event
func (m *PresenceEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDndStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePresenceStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTelephonyStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTerminationType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var presenceEventTypeDndStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TakeAllCalls","DoNotAcceptAnyCalls","DoNotAcceptDepartmentCalls","TakeDepartmentCallsOnly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		presenceEventTypeDndStatusPropEnum = append(presenceEventTypeDndStatusPropEnum, v)
	}
}

const (
	// PresenceEventDndStatusTakeAllCalls captures enum value "TakeAllCalls"
	PresenceEventDndStatusTakeAllCalls string = "TakeAllCalls"
	// PresenceEventDndStatusDoNotAcceptAnyCalls captures enum value "DoNotAcceptAnyCalls"
	PresenceEventDndStatusDoNotAcceptAnyCalls string = "DoNotAcceptAnyCalls"
	// PresenceEventDndStatusDoNotAcceptDepartmentCalls captures enum value "DoNotAcceptDepartmentCalls"
	PresenceEventDndStatusDoNotAcceptDepartmentCalls string = "DoNotAcceptDepartmentCalls"
	// PresenceEventDndStatusTakeDepartmentCallsOnly captures enum value "TakeDepartmentCallsOnly"
	PresenceEventDndStatusTakeDepartmentCallsOnly string = "TakeDepartmentCallsOnly"
)

// prop value enum
func (m *PresenceEvent) validateDndStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, presenceEventTypeDndStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PresenceEvent) validateDndStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.DndStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateDndStatusEnum("dndStatus", "body", m.DndStatus); err != nil {
		return err
	}

	return nil
}

var presenceEventTypePresenceStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Offline","Busy","Available"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		presenceEventTypePresenceStatusPropEnum = append(presenceEventTypePresenceStatusPropEnum, v)
	}
}

const (
	// PresenceEventPresenceStatusOffline captures enum value "Offline"
	PresenceEventPresenceStatusOffline string = "Offline"
	// PresenceEventPresenceStatusBusy captures enum value "Busy"
	PresenceEventPresenceStatusBusy string = "Busy"
	// PresenceEventPresenceStatusAvailable captures enum value "Available"
	PresenceEventPresenceStatusAvailable string = "Available"
)

// prop value enum
func (m *PresenceEvent) validatePresenceStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, presenceEventTypePresenceStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PresenceEvent) validatePresenceStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.PresenceStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validatePresenceStatusEnum("presenceStatus", "body", m.PresenceStatus); err != nil {
		return err
	}

	return nil
}

var presenceEventTypeTelephonyStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NoCall","CallConnected","Ringing","OnHold","ParkedCall"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		presenceEventTypeTelephonyStatusPropEnum = append(presenceEventTypeTelephonyStatusPropEnum, v)
	}
}

const (
	// PresenceEventTelephonyStatusNoCall captures enum value "NoCall"
	PresenceEventTelephonyStatusNoCall string = "NoCall"
	// PresenceEventTelephonyStatusCallConnected captures enum value "CallConnected"
	PresenceEventTelephonyStatusCallConnected string = "CallConnected"
	// PresenceEventTelephonyStatusRinging captures enum value "Ringing"
	PresenceEventTelephonyStatusRinging string = "Ringing"
	// PresenceEventTelephonyStatusOnHold captures enum value "OnHold"
	PresenceEventTelephonyStatusOnHold string = "OnHold"
	// PresenceEventTelephonyStatusParkedCall captures enum value "ParkedCall"
	PresenceEventTelephonyStatusParkedCall string = "ParkedCall"
)

// prop value enum
func (m *PresenceEvent) validateTelephonyStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, presenceEventTypeTelephonyStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PresenceEvent) validateTelephonyStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.TelephonyStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateTelephonyStatusEnum("telephonyStatus", "body", m.TelephonyStatus); err != nil {
		return err
	}

	return nil
}

var presenceEventTypeTerminationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Final","Intermediate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		presenceEventTypeTerminationTypePropEnum = append(presenceEventTypeTerminationTypePropEnum, v)
	}
}

const (
	// PresenceEventTerminationTypeFinal captures enum value "Final"
	PresenceEventTerminationTypeFinal string = "Final"
	// PresenceEventTerminationTypeIntermediate captures enum value "Intermediate"
	PresenceEventTerminationTypeIntermediate string = "Intermediate"
)

// prop value enum
func (m *PresenceEvent) validateTerminationTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, presenceEventTypeTerminationTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PresenceEvent) validateTerminationType(formats strfmt.Registry) error {

	if swag.IsZero(m.TerminationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTerminationTypeEnum("terminationType", "body", m.TerminationType); err != nil {
		return err
	}

	return nil
}

var presenceEventTypeUserStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Offline","Busy","Available"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		presenceEventTypeUserStatusPropEnum = append(presenceEventTypeUserStatusPropEnum, v)
	}
}

const (
	// PresenceEventUserStatusOffline captures enum value "Offline"
	PresenceEventUserStatusOffline string = "Offline"
	// PresenceEventUserStatusBusy captures enum value "Busy"
	PresenceEventUserStatusBusy string = "Busy"
	// PresenceEventUserStatusAvailable captures enum value "Available"
	PresenceEventUserStatusAvailable string = "Available"
)

// prop value enum
func (m *PresenceEvent) validateUserStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, presenceEventTypeUserStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PresenceEvent) validateUserStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.UserStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserStatusEnum("userStatus", "body", m.UserStatus); err != nil {
		return err
	}

	return nil
}
