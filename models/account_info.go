package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountInfo account info
// swagger:model AccountInfo
type AccountInfo struct {

	// Internal identifier of an account
	ID string `json:"id,omitempty"`

	// Main phone number of the current account
	MainNumber string `json:"mainNumber,omitempty"`

	// Operator's extension information. This extension will receive all calls and messages intended for the operator
	Operator *ExtensionInfo `json:"operator,omitempty"`

	// Additional account identifier, developed and applied by the client
	PartnerID string `json:"partnerId,omitempty"`

	// Account service information, including brand, service plan and billing plan
	ServiceInfo *AccountServiceInfo `json:"serviceInfo,omitempty"`

	// Specifies account configuration wizard state (web service setup). The default value is 'NotStarted'
	SetupWizardState string `json:"setupWizardState,omitempty"`

	// Status of the current account
	Status string `json:"status,omitempty"`

	// Status information (reason, comment, lifetime). Returned for 'Disabled' status only
	StatusInfo *StatusInfo `json:"statusInfo,omitempty"`

	// Canonical URI of an account
	URI string `json:"uri,omitempty"`
}

// Validate validates this account info
func (m *AccountInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperator(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServiceInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSetupWizardState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatusInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountInfo) validateOperator(formats strfmt.Registry) error {

	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	if m.Operator != nil {

		if err := m.Operator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operator")
			}
			return err
		}
	}

	return nil
}

func (m *AccountInfo) validateServiceInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceInfo) { // not required
		return nil
	}

	if m.ServiceInfo != nil {

		if err := m.ServiceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceInfo")
			}
			return err
		}
	}

	return nil
}

var accountInfoTypeSetupWizardStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotStarted","Incomplete","Completed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountInfoTypeSetupWizardStatePropEnum = append(accountInfoTypeSetupWizardStatePropEnum, v)
	}
}

const (
	// AccountInfoSetupWizardStateNotStarted captures enum value "NotStarted"
	AccountInfoSetupWizardStateNotStarted string = "NotStarted"
	// AccountInfoSetupWizardStateIncomplete captures enum value "Incomplete"
	AccountInfoSetupWizardStateIncomplete string = "Incomplete"
	// AccountInfoSetupWizardStateCompleted captures enum value "Completed"
	AccountInfoSetupWizardStateCompleted string = "Completed"
)

// prop value enum
func (m *AccountInfo) validateSetupWizardStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, accountInfoTypeSetupWizardStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AccountInfo) validateSetupWizardState(formats strfmt.Registry) error {

	if swag.IsZero(m.SetupWizardState) { // not required
		return nil
	}

	// value enum
	if err := m.validateSetupWizardStateEnum("setupWizardState", "body", m.SetupWizardState); err != nil {
		return err
	}

	return nil
}

var accountInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Confirmed","Disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountInfoTypeStatusPropEnum = append(accountInfoTypeStatusPropEnum, v)
	}
}

const (
	// AccountInfoStatusConfirmed captures enum value "Confirmed"
	AccountInfoStatusConfirmed string = "Confirmed"
	// AccountInfoStatusDisabled captures enum value "Disabled"
	AccountInfoStatusDisabled string = "Disabled"
)

// prop value enum
func (m *AccountInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, accountInfoTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AccountInfo) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *AccountInfo) validateStatusInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.StatusInfo) { // not required
		return nil
	}

	if m.StatusInfo != nil {

		if err := m.StatusInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusInfo")
			}
			return err
		}
	}

	return nil
}
