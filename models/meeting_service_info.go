package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MeetingServiceInfo meeting service info
// swagger:model MeetingServiceInfo
type MeetingServiceInfo struct {

	// Dial-in numbers data
	DialInNumbers *DialInNumbers `json:"dialInNumbers,omitempty"`

	// External user data
	ExternalUserInfo *ExternalUserInfo `json:"externalUserInfo,omitempty"`

	// URI to retrieve international dial in numbers
	IntlDialInNumbersURI string `json:"intlDialInNumbersUri,omitempty"`

	// URI to retrieve support information for meetings functionality
	SupportURI string `json:"supportUri,omitempty"`

	// Canonical URI of a meeting service info resource
	URI string `json:"uri,omitempty"`
}

// Validate validates this meeting service info
func (m *MeetingServiceInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDialInNumbers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExternalUserInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MeetingServiceInfo) validateDialInNumbers(formats strfmt.Registry) error {

	if swag.IsZero(m.DialInNumbers) { // not required
		return nil
	}

	if m.DialInNumbers != nil {

		if err := m.DialInNumbers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dialInNumbers")
			}
			return err
		}
	}

	return nil
}

func (m *MeetingServiceInfo) validateExternalUserInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalUserInfo) { // not required
		return nil
	}

	if m.ExternalUserInfo != nil {

		if err := m.ExternalUserInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalUserInfo")
			}
			return err
		}
	}

	return nil
}
