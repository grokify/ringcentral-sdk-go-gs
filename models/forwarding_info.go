package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ForwardingInfo forwarding info
// swagger:model ForwardingInfo
type ForwardingInfo struct {

	// Specifies if the administrator's softphone is notified before forwarding the incoming call to desk phones and forwarding numbers. The default value is 'False'
	NotifyAdminSoftPhones bool `json:"notifyAdminSoftPhones,omitempty"`

	// Specifies if the user's softphone(s) are notified before forwarding the incoming call to desk phones and forwarding numbers
	NotifyMySoftPhones bool `json:"notifyMySoftPhones,omitempty"`

	// Specifies the order in which forwarding numbers ring. 'Sequentially' means that forwarding numbers are ringing one at a time, in order of priority. 'Simultaneously' means that forwarding numbers are ring all at the same time
	RingingMode string `json:"ringingMode,omitempty"`

	// Information on a call forwarding rule
	Rules []*RuleInfo `json:"rules"`

	// Number of rings before forwarding starts
	SoftPhonesRingCount int64 `json:"softPhonesRingCount,omitempty"`
}

// Validate validates this forwarding info
func (m *ForwardingInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRingingMode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var forwardingInfoTypeRingingModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Sequentially","Simultaneously"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		forwardingInfoTypeRingingModePropEnum = append(forwardingInfoTypeRingingModePropEnum, v)
	}
}

const (
	// ForwardingInfoRingingModeSequentially captures enum value "Sequentially"
	ForwardingInfoRingingModeSequentially string = "Sequentially"
	// ForwardingInfoRingingModeSimultaneously captures enum value "Simultaneously"
	ForwardingInfoRingingModeSimultaneously string = "Simultaneously"
)

// prop value enum
func (m *ForwardingInfo) validateRingingModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, forwardingInfoTypeRingingModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ForwardingInfo) validateRingingMode(formats strfmt.Registry) error {

	if swag.IsZero(m.RingingMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateRingingModeEnum("ringingMode", "body", m.RingingMode); err != nil {
		return err
	}

	return nil
}

func (m *ForwardingInfo) validateRules(formats strfmt.Registry) error {

	if swag.IsZero(m.Rules) { // not required
		return nil
	}

	for i := 0; i < len(m.Rules); i++ {

		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {

			if err := m.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}
