package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ConferencingInfo conferencing info
// swagger:model ConferencingInfo
type ConferencingInfo struct {

	// Determines if host user allows conference participants to join before the host
	AllowJoinBeforeHost bool `json:"allowJoinBeforeHost,omitempty"`

	// Access code for a host user
	HostCode string `json:"hostCode,omitempty"`

	// Internal parameter specifying conferencing engine
	Mode string `json:"mode,omitempty"`

	// Access code for any participant
	ParticipantCode string `json:"participantCode,omitempty"`

	// Primary conference phone number for user's home country returned in E.164 (11-digits) format
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// List of multiple dial-in phone numbers to connect to audio conference service, relevant for user's brand. Each number is given with the country and location information, in order to let the user choose the less expensive way to connect to a conference. The first number in the list is the primary conference number, that is default and domestic
	PhoneNumbers []*ConferencingInfoPhoneNumberInfo `json:"phoneNumbers"`

	// Short URL leading to the service web page Tap to Join for audio conference bridge
	TapToJoinURI string `json:"tapToJoinUri,omitempty"`

	// Canonical URI of a conferencing
	URI string `json:"uri,omitempty"`
}

// Validate validates this conferencing info
func (m *ConferencingInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePhoneNumbers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConferencingInfo) validatePhoneNumbers(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumbers) { // not required
		return nil
	}

	for i := 0; i < len(m.PhoneNumbers); i++ {

		if swag.IsZero(m.PhoneNumbers[i]) { // not required
			continue
		}

		if m.PhoneNumbers[i] != nil {

			if err := m.PhoneNumbers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("phoneNumbers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}
