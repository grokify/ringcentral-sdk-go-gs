package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WeeklyScheduleInfo weekly schedule info
// swagger:model WeeklyScheduleInfo
type WeeklyScheduleInfo struct {

	// Time intervals for a particular day
	Friday []*TimeInterval `json:"friday"`

	// Time intervals for a particular day
	Monday []*TimeInterval `json:"monday"`

	// Time intervals for a particular day
	Saturday []*TimeInterval `json:"saturday"`

	// Time intervals for a particular day
	Sunday []*TimeInterval `json:"sunday"`

	// Time intervals for a particular day
	Thursday []*TimeInterval `json:"thursday"`

	// Time intervals for a particular day
	Tuesday []*TimeInterval `json:"tuesday"`

	// Time intervals for a particular day
	Wednesday []*TimeInterval `json:"wednesday"`
}

// Validate validates this weekly schedule info
func (m *WeeklyScheduleInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFriday(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMonday(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSaturday(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSunday(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateThursday(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTuesday(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWednesday(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WeeklyScheduleInfo) validateFriday(formats strfmt.Registry) error {

	if swag.IsZero(m.Friday) { // not required
		return nil
	}

	for i := 0; i < len(m.Friday); i++ {

		if swag.IsZero(m.Friday[i]) { // not required
			continue
		}

		if m.Friday[i] != nil {

			if err := m.Friday[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("friday" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WeeklyScheduleInfo) validateMonday(formats strfmt.Registry) error {

	if swag.IsZero(m.Monday) { // not required
		return nil
	}

	for i := 0; i < len(m.Monday); i++ {

		if swag.IsZero(m.Monday[i]) { // not required
			continue
		}

		if m.Monday[i] != nil {

			if err := m.Monday[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("monday" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WeeklyScheduleInfo) validateSaturday(formats strfmt.Registry) error {

	if swag.IsZero(m.Saturday) { // not required
		return nil
	}

	for i := 0; i < len(m.Saturday); i++ {

		if swag.IsZero(m.Saturday[i]) { // not required
			continue
		}

		if m.Saturday[i] != nil {

			if err := m.Saturday[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("saturday" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WeeklyScheduleInfo) validateSunday(formats strfmt.Registry) error {

	if swag.IsZero(m.Sunday) { // not required
		return nil
	}

	for i := 0; i < len(m.Sunday); i++ {

		if swag.IsZero(m.Sunday[i]) { // not required
			continue
		}

		if m.Sunday[i] != nil {

			if err := m.Sunday[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sunday" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WeeklyScheduleInfo) validateThursday(formats strfmt.Registry) error {

	if swag.IsZero(m.Thursday) { // not required
		return nil
	}

	for i := 0; i < len(m.Thursday); i++ {

		if swag.IsZero(m.Thursday[i]) { // not required
			continue
		}

		if m.Thursday[i] != nil {

			if err := m.Thursday[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("thursday" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WeeklyScheduleInfo) validateTuesday(formats strfmt.Registry) error {

	if swag.IsZero(m.Tuesday) { // not required
		return nil
	}

	for i := 0; i < len(m.Tuesday); i++ {

		if swag.IsZero(m.Tuesday[i]) { // not required
			continue
		}

		if m.Tuesday[i] != nil {

			if err := m.Tuesday[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tuesday" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WeeklyScheduleInfo) validateWednesday(formats strfmt.Registry) error {

	if swag.IsZero(m.Wednesday) { // not required
		return nil
	}

	for i := 0; i < len(m.Wednesday); i++ {

		if swag.IsZero(m.Wednesday[i]) { // not required
			continue
		}

		if m.Wednesday[i] != nil {

			if err := m.Wednesday[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("wednesday" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}
