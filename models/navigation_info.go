package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NavigationInfo navigation info
// swagger:model NavigationInfo
type NavigationInfo struct {

	// First page of the list
	FirstPage *Page `json:"firstPage,omitempty"`

	// Last page of the list
	LastPage *Page `json:"lastPage,omitempty"`

	// Next page of the list
	NextPage *Page `json:"nextPage,omitempty"`

	// Previous page of the list
	PreviousPage *Page `json:"previousPage,omitempty"`
}

// Validate validates this navigation info
func (m *NavigationInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstPage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastPage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNextPage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePreviousPage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NavigationInfo) validateFirstPage(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstPage) { // not required
		return nil
	}

	if m.FirstPage != nil {

		if err := m.FirstPage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firstPage")
			}
			return err
		}
	}

	return nil
}

func (m *NavigationInfo) validateLastPage(formats strfmt.Registry) error {

	if swag.IsZero(m.LastPage) { // not required
		return nil
	}

	if m.LastPage != nil {

		if err := m.LastPage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPage")
			}
			return err
		}
	}

	return nil
}

func (m *NavigationInfo) validateNextPage(formats strfmt.Registry) error {

	if swag.IsZero(m.NextPage) { // not required
		return nil
	}

	if m.NextPage != nil {

		if err := m.NextPage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nextPage")
			}
			return err
		}
	}

	return nil
}

func (m *NavigationInfo) validatePreviousPage(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousPage) { // not required
		return nil
	}

	if m.PreviousPage != nil {

		if err := m.PreviousPage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("previousPage")
			}
			return err
		}
	}

	return nil
}
