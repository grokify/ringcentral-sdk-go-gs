package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExtensionInfo extension info
// swagger:model ExtensionInfo
type ExtensionInfo struct {

	// Contact detailed information
	Contact *ContactInfo `json:"contact,omitempty"`

	// Information on department extension(s), to which the requested extension belongs. Returned only for user extensions, members of department, requested by single extensionId
	Departments []*DepartmentInfo `json:"departments"`

	// Number of department extension
	ExtensionNumber string `json:"extensionNumber,omitempty"`

	// Internal identifier of an extension
	ID string `json:"id,omitempty"`

	// Extension user name
	Name string `json:"name,omitempty"`

	// For Partner Applications Internal identifier of an extension created by partner. The RingCentral supports the mapping of accounts and stores the corresponding account ID/extension ID for each partner ID of a client application. In request URIs partner IDs are accepted instead of regular RingCentral native IDs as path parameters using pid = XXX clause. Though in response URIs contain the corresponding account IDs and extension IDs. In all request and response bodies these values are reflected via partnerId attributes of account and extension
	PartnerID string `json:"partnerId,omitempty"`

	// Extension permissions, corresponding to the Service Web permissions 'Admin' and 'InternationalCalling'
	Permissions *ExtensionPermissions `json:"permissions,omitempty"`

	// Information on profile image
	ProfileImage *ProfileImageInfo `json:"profileImage,omitempty"`

	// List of non-RC internal identifiers assigned to an extension
	References []*ReferenceInfo `json:"references"`

	// Extension region data (timezone, home country, language)
	RegionalSettings *RegionalSettings `json:"regionalSettings,omitempty"`

	// Extension service features returned in response only when the logged-in user requests his/her own extension info, see also Extension Service Features
	ServiceFeatures []*ExtensionServiceFeatureInfo `json:"serviceFeatures"`

	// Specifies extension configuration wizard state (web service setup). The default value is 'NotStarted'
	SetupWizardState string `json:"setupWizardState,omitempty"`

	// Extension current state. If the status is 'Unassigned'. Returned for all extensions
	Status string `json:"status,omitempty"`

	// Status information (reason, comment). Returned for 'Disabled' status only
	StatusInfo *StatusInfo `json:"statusInfo,omitempty"`

	// Extension type
	Type string `json:"type,omitempty"`

	// Canonical URI of an extension
	URI string `json:"uri,omitempty"`
}

// Validate validates this extension info
func (m *ExtensionInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContact(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDepartments(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProfileImage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReferences(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegionalSettings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServiceFeatures(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSetupWizardState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatusInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtensionInfo) validateContact(formats strfmt.Registry) error {

	if swag.IsZero(m.Contact) { // not required
		return nil
	}

	if m.Contact != nil {

		if err := m.Contact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionInfo) validateDepartments(formats strfmt.Registry) error {

	if swag.IsZero(m.Departments) { // not required
		return nil
	}

	for i := 0; i < len(m.Departments); i++ {

		if swag.IsZero(m.Departments[i]) { // not required
			continue
		}

		if m.Departments[i] != nil {

			if err := m.Departments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("departments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtensionInfo) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	if m.Permissions != nil {

		if err := m.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionInfo) validateProfileImage(formats strfmt.Registry) error {

	if swag.IsZero(m.ProfileImage) { // not required
		return nil
	}

	if m.ProfileImage != nil {

		if err := m.ProfileImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profileImage")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionInfo) validateReferences(formats strfmt.Registry) error {

	if swag.IsZero(m.References) { // not required
		return nil
	}

	for i := 0; i < len(m.References); i++ {

		if swag.IsZero(m.References[i]) { // not required
			continue
		}

		if m.References[i] != nil {

			if err := m.References[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtensionInfo) validateRegionalSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.RegionalSettings) { // not required
		return nil
	}

	if m.RegionalSettings != nil {

		if err := m.RegionalSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("regionalSettings")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionInfo) validateServiceFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceFeatures) { // not required
		return nil
	}

	for i := 0; i < len(m.ServiceFeatures); i++ {

		if swag.IsZero(m.ServiceFeatures[i]) { // not required
			continue
		}

		if m.ServiceFeatures[i] != nil {

			if err := m.ServiceFeatures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceFeatures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var extensionInfoTypeSetupWizardStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotStarted","Incomplete","Completed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		extensionInfoTypeSetupWizardStatePropEnum = append(extensionInfoTypeSetupWizardStatePropEnum, v)
	}
}

const (
	// ExtensionInfoSetupWizardStateNotStarted captures enum value "NotStarted"
	ExtensionInfoSetupWizardStateNotStarted string = "NotStarted"
	// ExtensionInfoSetupWizardStateIncomplete captures enum value "Incomplete"
	ExtensionInfoSetupWizardStateIncomplete string = "Incomplete"
	// ExtensionInfoSetupWizardStateCompleted captures enum value "Completed"
	ExtensionInfoSetupWizardStateCompleted string = "Completed"
)

// prop value enum
func (m *ExtensionInfo) validateSetupWizardStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, extensionInfoTypeSetupWizardStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExtensionInfo) validateSetupWizardState(formats strfmt.Registry) error {

	if swag.IsZero(m.SetupWizardState) { // not required
		return nil
	}

	// value enum
	if err := m.validateSetupWizardStateEnum("setupWizardState", "body", m.SetupWizardState); err != nil {
		return err
	}

	return nil
}

var extensionInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Enabled","Disabled","NotActivated","Unassigned"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		extensionInfoTypeStatusPropEnum = append(extensionInfoTypeStatusPropEnum, v)
	}
}

const (
	// ExtensionInfoStatusEnabled captures enum value "Enabled"
	ExtensionInfoStatusEnabled string = "Enabled"
	// ExtensionInfoStatusDisabled captures enum value "Disabled"
	ExtensionInfoStatusDisabled string = "Disabled"
	// ExtensionInfoStatusNotActivated captures enum value "NotActivated"
	ExtensionInfoStatusNotActivated string = "NotActivated"
	// ExtensionInfoStatusUnassigned captures enum value "Unassigned"
	ExtensionInfoStatusUnassigned string = "Unassigned"
)

// prop value enum
func (m *ExtensionInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, extensionInfoTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExtensionInfo) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionInfo) validateStatusInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.StatusInfo) { // not required
		return nil
	}

	if m.StatusInfo != nil {

		if err := m.StatusInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusInfo")
			}
			return err
		}
	}

	return nil
}

var extensionInfoTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["User","FaxUser","VirtualUser","DigitalUser","Department","Announcement","Voicemail","SharedLinesGroup","PagingOnlyGroup","IvrMenu","ApplicationExtension","ParkLocation"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		extensionInfoTypeTypePropEnum = append(extensionInfoTypeTypePropEnum, v)
	}
}

const (
	// ExtensionInfoTypeUser captures enum value "User"
	ExtensionInfoTypeUser string = "User"
	// ExtensionInfoTypeFaxUser captures enum value "FaxUser"
	ExtensionInfoTypeFaxUser string = "FaxUser"
	// ExtensionInfoTypeVirtualUser captures enum value "VirtualUser"
	ExtensionInfoTypeVirtualUser string = "VirtualUser"
	// ExtensionInfoTypeDigitalUser captures enum value "DigitalUser"
	ExtensionInfoTypeDigitalUser string = "DigitalUser"
	// ExtensionInfoTypeDepartment captures enum value "Department"
	ExtensionInfoTypeDepartment string = "Department"
	// ExtensionInfoTypeAnnouncement captures enum value "Announcement"
	ExtensionInfoTypeAnnouncement string = "Announcement"
	// ExtensionInfoTypeVoicemail captures enum value "Voicemail"
	ExtensionInfoTypeVoicemail string = "Voicemail"
	// ExtensionInfoTypeSharedLinesGroup captures enum value "SharedLinesGroup"
	ExtensionInfoTypeSharedLinesGroup string = "SharedLinesGroup"
	// ExtensionInfoTypePagingOnlyGroup captures enum value "PagingOnlyGroup"
	ExtensionInfoTypePagingOnlyGroup string = "PagingOnlyGroup"
	// ExtensionInfoTypeIvrMenu captures enum value "IvrMenu"
	ExtensionInfoTypeIvrMenu string = "IvrMenu"
	// ExtensionInfoTypeApplicationExtension captures enum value "ApplicationExtension"
	ExtensionInfoTypeApplicationExtension string = "ApplicationExtension"
	// ExtensionInfoTypeParkLocation captures enum value "ParkLocation"
	ExtensionInfoTypeParkLocation string = "ParkLocation"
)

// prop value enum
func (m *ExtensionInfo) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, extensionInfoTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExtensionInfo) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
