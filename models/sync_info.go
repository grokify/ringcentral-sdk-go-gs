package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SyncInfo sync info
// swagger:model SyncInfo
type SyncInfo struct {

	// Last synchronization datetime in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z
	SyncTime strfmt.DateTime `json:"syncTime,omitempty"`

	// Synchronization token
	SyncToken string `json:"syncToken,omitempty"`

	// Type of synchronization
	SyncType string `json:"syncType,omitempty"`
}

// Validate validates this sync info
func (m *SyncInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSyncType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var syncInfoTypeSyncTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FSync","ISync"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		syncInfoTypeSyncTypePropEnum = append(syncInfoTypeSyncTypePropEnum, v)
	}
}

const (
	// SyncInfoSyncTypeFSync captures enum value "FSync"
	SyncInfoSyncTypeFSync string = "FSync"
	// SyncInfoSyncTypeISync captures enum value "ISync"
	SyncInfoSyncTypeISync string = "ISync"
)

// prop value enum
func (m *SyncInfo) validateSyncTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, syncInfoTypeSyncTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SyncInfo) validateSyncType(formats strfmt.Registry) error {

	if swag.IsZero(m.SyncType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSyncTypeEnum("syncType", "body", m.SyncType); err != nil {
		return err
	}

	return nil
}
