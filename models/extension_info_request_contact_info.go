package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExtensionInfoRequestContactInfo extension info request contact info
// swagger:model ExtensionInfo.Request.ContactInfo
type ExtensionInfoRequestContactInfo struct {

	// Contact information
	Contact *ContactInfo `json:"contact,omitempty"`

	// Extension user department
	Department string `json:"department,omitempty"`

	// Region data (timezone, home country, language)
	RegionalSettings *ExtensionInfoRequestContactInfoRegionalSettings `json:"regionalSettings,omitempty"`

	// Specifies extension configuration wizard state (web service setup). The default value is 'NotStarted'
	SetupWizardState string `json:"setupWizardState,omitempty"`
}

// Validate validates this extension info request contact info
func (m *ExtensionInfoRequestContactInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContact(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegionalSettings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSetupWizardState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtensionInfoRequestContactInfo) validateContact(formats strfmt.Registry) error {

	if swag.IsZero(m.Contact) { // not required
		return nil
	}

	if m.Contact != nil {

		if err := m.Contact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionInfoRequestContactInfo) validateRegionalSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.RegionalSettings) { // not required
		return nil
	}

	if m.RegionalSettings != nil {

		if err := m.RegionalSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("regionalSettings")
			}
			return err
		}
	}

	return nil
}

var extensionInfoRequestContactInfoTypeSetupWizardStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotStarted","Incomplete","Completed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		extensionInfoRequestContactInfoTypeSetupWizardStatePropEnum = append(extensionInfoRequestContactInfoTypeSetupWizardStatePropEnum, v)
	}
}

const (
	// ExtensionInfoRequestContactInfoSetupWizardStateNotStarted captures enum value "NotStarted"
	ExtensionInfoRequestContactInfoSetupWizardStateNotStarted string = "NotStarted"
	// ExtensionInfoRequestContactInfoSetupWizardStateIncomplete captures enum value "Incomplete"
	ExtensionInfoRequestContactInfoSetupWizardStateIncomplete string = "Incomplete"
	// ExtensionInfoRequestContactInfoSetupWizardStateCompleted captures enum value "Completed"
	ExtensionInfoRequestContactInfoSetupWizardStateCompleted string = "Completed"
)

// prop value enum
func (m *ExtensionInfoRequestContactInfo) validateSetupWizardStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, extensionInfoRequestContactInfoTypeSetupWizardStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExtensionInfoRequestContactInfo) validateSetupWizardState(formats strfmt.Registry) error {

	if swag.IsZero(m.SetupWizardState) { // not required
		return nil
	}

	// value enum
	if err := m.validateSetupWizardStateEnum("setupWizardState", "body", m.SetupWizardState); err != nil {
		return err
	}

	return nil
}
