package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CallLogRecord call log record
// swagger:model CallLogRecord
type CallLogRecord struct {

	// Action description of the call operation
	Action string `json:"action,omitempty"`

	// Call direction
	Direction string `json:"direction,omitempty"`

	// Call duration in seconds
	Duration int64 `json:"duration,omitempty"`

	// Caller information
	From *CallerInfo `json:"from,omitempty"`

	// Internal identifier of a cal log record
	ID string `json:"id,omitempty"`

	// For 'Detailed' view only. The datetime when the call log record was modified in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z
	LastModifiedTime strfmt.DateTime `json:"lastModifiedTime,omitempty"`

	// For 'Detailed' view only. Leg description
	Legs []*LegInfo `json:"legs"`

	// Call recording data. Returned if the call is recorded, the withRecording parameter is set to 'True' in this case
	Recording *RecordingInfo `json:"recording,omitempty"`

	// Status description of the call operation
	Result string `json:"result,omitempty"`

	// Internal identifier of a call session
	SessionID string `json:"sessionId,omitempty"`

	// The call start datetime in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// Callee information
	To *CallerInfo `json:"to,omitempty"`

	// For 'Detailed' view only. Call transport
	Transport string `json:"transport,omitempty"`

	// Call type
	Type string `json:"type,omitempty"`

	// Canonical URI of a call log record
	URI string `json:"uri,omitempty"`
}

// Validate validates this call log record
func (m *CallLogRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLegs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRecording(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransport(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var callLogRecordTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Phone Call","Phone Login","Incoming Fax","Accept Call","FindMe","FollowMe","Outgoing Fax","Call Return","Calling Card","Ring Directly","RingOut Web","VoIP Call","RingOut PC","RingMe","Transfer","411 Info","Emergency","E911 Update","Support","RingOut Mobile"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		callLogRecordTypeActionPropEnum = append(callLogRecordTypeActionPropEnum, v)
	}
}

const (
	// CallLogRecordActionUnknown captures enum value "Unknown"
	CallLogRecordActionUnknown string = "Unknown"
	// CallLogRecordActionPhoneCall captures enum value "Phone Call"
	CallLogRecordActionPhoneCall string = "Phone Call"
	// CallLogRecordActionPhoneLogin captures enum value "Phone Login"
	CallLogRecordActionPhoneLogin string = "Phone Login"
	// CallLogRecordActionIncomingFax captures enum value "Incoming Fax"
	CallLogRecordActionIncomingFax string = "Incoming Fax"
	// CallLogRecordActionAcceptCall captures enum value "Accept Call"
	CallLogRecordActionAcceptCall string = "Accept Call"
	// CallLogRecordActionFindMe captures enum value "FindMe"
	CallLogRecordActionFindMe string = "FindMe"
	// CallLogRecordActionFollowMe captures enum value "FollowMe"
	CallLogRecordActionFollowMe string = "FollowMe"
	// CallLogRecordActionOutgoingFax captures enum value "Outgoing Fax"
	CallLogRecordActionOutgoingFax string = "Outgoing Fax"
	// CallLogRecordActionCallReturn captures enum value "Call Return"
	CallLogRecordActionCallReturn string = "Call Return"
	// CallLogRecordActionCallingCard captures enum value "Calling Card"
	CallLogRecordActionCallingCard string = "Calling Card"
	// CallLogRecordActionRingDirectly captures enum value "Ring Directly"
	CallLogRecordActionRingDirectly string = "Ring Directly"
	// CallLogRecordActionRingOutWeb captures enum value "RingOut Web"
	CallLogRecordActionRingOutWeb string = "RingOut Web"
	// CallLogRecordActionVoIPCall captures enum value "VoIP Call"
	CallLogRecordActionVoIPCall string = "VoIP Call"
	// CallLogRecordActionRingOutPC captures enum value "RingOut PC"
	CallLogRecordActionRingOutPC string = "RingOut PC"
	// CallLogRecordActionRingMe captures enum value "RingMe"
	CallLogRecordActionRingMe string = "RingMe"
	// CallLogRecordActionTransfer captures enum value "Transfer"
	CallLogRecordActionTransfer string = "Transfer"
	// CallLogRecordActionNr411Info captures enum value "411 Info"
	CallLogRecordActionNr411Info string = "411 Info"
	// CallLogRecordActionEmergency captures enum value "Emergency"
	CallLogRecordActionEmergency string = "Emergency"
	// CallLogRecordActionE911Update captures enum value "E911 Update"
	CallLogRecordActionE911Update string = "E911 Update"
	// CallLogRecordActionSupport captures enum value "Support"
	CallLogRecordActionSupport string = "Support"
	// CallLogRecordActionRingOutMobile captures enum value "RingOut Mobile"
	CallLogRecordActionRingOutMobile string = "RingOut Mobile"
)

// prop value enum
func (m *CallLogRecord) validateActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, callLogRecordTypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CallLogRecord) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

var callLogRecordTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Inbound","Outbound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		callLogRecordTypeDirectionPropEnum = append(callLogRecordTypeDirectionPropEnum, v)
	}
}

const (
	// CallLogRecordDirectionInbound captures enum value "Inbound"
	CallLogRecordDirectionInbound string = "Inbound"
	// CallLogRecordDirectionOutbound captures enum value "Outbound"
	CallLogRecordDirectionOutbound string = "Outbound"
)

// prop value enum
func (m *CallLogRecord) validateDirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, callLogRecordTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CallLogRecord) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *CallLogRecord) validateFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.From) { // not required
		return nil
	}

	if m.From != nil {

		if err := m.From.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("from")
			}
			return err
		}
	}

	return nil
}

func (m *CallLogRecord) validateLegs(formats strfmt.Registry) error {

	if swag.IsZero(m.Legs) { // not required
		return nil
	}

	for i := 0; i < len(m.Legs); i++ {

		if swag.IsZero(m.Legs[i]) { // not required
			continue
		}

		if m.Legs[i] != nil {

			if err := m.Legs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("legs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CallLogRecord) validateRecording(formats strfmt.Registry) error {

	if swag.IsZero(m.Recording) { // not required
		return nil
	}

	if m.Recording != nil {

		if err := m.Recording.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recording")
			}
			return err
		}
	}

	return nil
}

var callLogRecordTypeResultPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","ResultInProgress","Missed","Call accepted","Voicemail","Rejected","Reply","Received","Receive Error","Fax on Demand","Partial Receive","Blocked","Call connected","No Answer","International Disabled","Busy","Send Error","Sent","No fax machine","ResultEmpty","Account","Suspended","Call Failed","Call Failure","Internal Error","IP Phone offline","Restricted Number","Wrong Number","Stopped","Hang up","Poor Line Quality","Partially Sent","International Restriction","Abandoned","Declined","Fax Receipt Error","Fax Send Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		callLogRecordTypeResultPropEnum = append(callLogRecordTypeResultPropEnum, v)
	}
}

const (
	// CallLogRecordResultUnknown captures enum value "Unknown"
	CallLogRecordResultUnknown string = "Unknown"
	// CallLogRecordResultResultInProgress captures enum value "ResultInProgress"
	CallLogRecordResultResultInProgress string = "ResultInProgress"
	// CallLogRecordResultMissed captures enum value "Missed"
	CallLogRecordResultMissed string = "Missed"
	// CallLogRecordResultCallAccepted captures enum value "Call accepted"
	CallLogRecordResultCallAccepted string = "Call accepted"
	// CallLogRecordResultVoicemail captures enum value "Voicemail"
	CallLogRecordResultVoicemail string = "Voicemail"
	// CallLogRecordResultRejected captures enum value "Rejected"
	CallLogRecordResultRejected string = "Rejected"
	// CallLogRecordResultReply captures enum value "Reply"
	CallLogRecordResultReply string = "Reply"
	// CallLogRecordResultReceived captures enum value "Received"
	CallLogRecordResultReceived string = "Received"
	// CallLogRecordResultReceiveError captures enum value "Receive Error"
	CallLogRecordResultReceiveError string = "Receive Error"
	// CallLogRecordResultFaxOnDemand captures enum value "Fax on Demand"
	CallLogRecordResultFaxOnDemand string = "Fax on Demand"
	// CallLogRecordResultPartialReceive captures enum value "Partial Receive"
	CallLogRecordResultPartialReceive string = "Partial Receive"
	// CallLogRecordResultBlocked captures enum value "Blocked"
	CallLogRecordResultBlocked string = "Blocked"
	// CallLogRecordResultCallConnected captures enum value "Call connected"
	CallLogRecordResultCallConnected string = "Call connected"
	// CallLogRecordResultNoAnswer captures enum value "No Answer"
	CallLogRecordResultNoAnswer string = "No Answer"
	// CallLogRecordResultInternationalDisabled captures enum value "International Disabled"
	CallLogRecordResultInternationalDisabled string = "International Disabled"
	// CallLogRecordResultBusy captures enum value "Busy"
	CallLogRecordResultBusy string = "Busy"
	// CallLogRecordResultSendError captures enum value "Send Error"
	CallLogRecordResultSendError string = "Send Error"
	// CallLogRecordResultSent captures enum value "Sent"
	CallLogRecordResultSent string = "Sent"
	// CallLogRecordResultNoFaxMachine captures enum value "No fax machine"
	CallLogRecordResultNoFaxMachine string = "No fax machine"
	// CallLogRecordResultResultEmpty captures enum value "ResultEmpty"
	CallLogRecordResultResultEmpty string = "ResultEmpty"
	// CallLogRecordResultAccount captures enum value "Account"
	CallLogRecordResultAccount string = "Account"
	// CallLogRecordResultSuspended captures enum value "Suspended"
	CallLogRecordResultSuspended string = "Suspended"
	// CallLogRecordResultCallFailed captures enum value "Call Failed"
	CallLogRecordResultCallFailed string = "Call Failed"
	// CallLogRecordResultCallFailure captures enum value "Call Failure"
	CallLogRecordResultCallFailure string = "Call Failure"
	// CallLogRecordResultInternalError captures enum value "Internal Error"
	CallLogRecordResultInternalError string = "Internal Error"
	// CallLogRecordResultIPPhoneOffline captures enum value "IP Phone offline"
	CallLogRecordResultIPPhoneOffline string = "IP Phone offline"
	// CallLogRecordResultRestrictedNumber captures enum value "Restricted Number"
	CallLogRecordResultRestrictedNumber string = "Restricted Number"
	// CallLogRecordResultWrongNumber captures enum value "Wrong Number"
	CallLogRecordResultWrongNumber string = "Wrong Number"
	// CallLogRecordResultStopped captures enum value "Stopped"
	CallLogRecordResultStopped string = "Stopped"
	// CallLogRecordResultHangUp captures enum value "Hang up"
	CallLogRecordResultHangUp string = "Hang up"
	// CallLogRecordResultPoorLineQuality captures enum value "Poor Line Quality"
	CallLogRecordResultPoorLineQuality string = "Poor Line Quality"
	// CallLogRecordResultPartiallySent captures enum value "Partially Sent"
	CallLogRecordResultPartiallySent string = "Partially Sent"
	// CallLogRecordResultInternationalRestriction captures enum value "International Restriction"
	CallLogRecordResultInternationalRestriction string = "International Restriction"
	// CallLogRecordResultAbandoned captures enum value "Abandoned"
	CallLogRecordResultAbandoned string = "Abandoned"
	// CallLogRecordResultDeclined captures enum value "Declined"
	CallLogRecordResultDeclined string = "Declined"
	// CallLogRecordResultFaxReceiptError captures enum value "Fax Receipt Error"
	CallLogRecordResultFaxReceiptError string = "Fax Receipt Error"
	// CallLogRecordResultFaxSendError captures enum value "Fax Send Error"
	CallLogRecordResultFaxSendError string = "Fax Send Error"
)

// prop value enum
func (m *CallLogRecord) validateResultEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, callLogRecordTypeResultPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CallLogRecord) validateResult(formats strfmt.Registry) error {

	if swag.IsZero(m.Result) { // not required
		return nil
	}

	// value enum
	if err := m.validateResultEnum("result", "body", m.Result); err != nil {
		return err
	}

	return nil
}

func (m *CallLogRecord) validateTo(formats strfmt.Registry) error {

	if swag.IsZero(m.To) { // not required
		return nil
	}

	if m.To != nil {

		if err := m.To.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("to")
			}
			return err
		}
	}

	return nil
}

var callLogRecordTypeTransportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PSTN","VoIP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		callLogRecordTypeTransportPropEnum = append(callLogRecordTypeTransportPropEnum, v)
	}
}

const (
	// CallLogRecordTransportPSTN captures enum value "PSTN"
	CallLogRecordTransportPSTN string = "PSTN"
	// CallLogRecordTransportVoIP captures enum value "VoIP"
	CallLogRecordTransportVoIP string = "VoIP"
)

// prop value enum
func (m *CallLogRecord) validateTransportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, callLogRecordTypeTransportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CallLogRecord) validateTransport(formats strfmt.Registry) error {

	if swag.IsZero(m.Transport) { // not required
		return nil
	}

	// value enum
	if err := m.validateTransportEnum("transport", "body", m.Transport); err != nil {
		return err
	}

	return nil
}

var callLogRecordTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Voice","Fax"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		callLogRecordTypeTypePropEnum = append(callLogRecordTypeTypePropEnum, v)
	}
}

const (
	// CallLogRecordTypeVoice captures enum value "Voice"
	CallLogRecordTypeVoice string = "Voice"
	// CallLogRecordTypeFax captures enum value "Fax"
	CallLogRecordTypeFax string = "Fax"
)

// prop value enum
func (m *CallLogRecord) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, callLogRecordTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CallLogRecord) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
