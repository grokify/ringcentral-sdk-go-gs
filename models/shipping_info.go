package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShippingInfo shipping info
// swagger:model ShippingInfo
type ShippingInfo struct {

	// Shipping address for the order. If it coincides with the Emergency Service Address, then can be omitted. By default the same value as the emergencyServiceAddress. Multiple addresses can be specified; in case an order contains several devices, they can be delivered to different addresses
	Address []*ShippingAddress `json:"address"`

	// Shipping carrier name. Appears only if the device status is "Shipped"
	Carrier string `json:"carrier,omitempty"`

	// Shipping method information
	Method []*ShippingMethod `json:"method"`

	// Shipping status of the order item. It is set to 'Initial' when the order is submitted. Then it is changed to 'Accepted' when a distributor starts processing the order. Finally it is changed to Shipped which means that distributor has shipped the device.
	Status string `json:"status,omitempty"`

	// Carrier-specific tracking number. Appears only if the device status is "Shipped"
	TrackingNumber string `json:"trackingNumber,omitempty"`
}

// Validate validates this shipping info
func (m *ShippingInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShippingInfo) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	for i := 0; i < len(m.Address); i++ {

		if swag.IsZero(m.Address[i]) { // not required
			continue
		}

		if m.Address[i] != nil {

			if err := m.Address[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("address" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ShippingInfo) validateMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.Method) { // not required
		return nil
	}

	for i := 0; i < len(m.Method); i++ {

		if swag.IsZero(m.Method[i]) { // not required
			continue
		}

		if m.Method[i] != nil {

			if err := m.Method[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("method" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var shippingInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Initial","Accepted","Shipped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shippingInfoTypeStatusPropEnum = append(shippingInfoTypeStatusPropEnum, v)
	}
}

const (
	// ShippingInfoStatusInitial captures enum value "Initial"
	ShippingInfoStatusInitial string = "Initial"
	// ShippingInfoStatusAccepted captures enum value "Accepted"
	ShippingInfoStatusAccepted string = "Accepted"
	// ShippingInfoStatusShipped captures enum value "Shipped"
	ShippingInfoStatusShipped string = "Shipped"
)

// prop value enum
func (m *ShippingInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, shippingInfoTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ShippingInfo) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}
