package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MessageInfoCallerInfo message info caller info
// swagger:model MessageInfo.CallerInfo
type MessageInfoCallerInfo struct {

	// Extension short number (usually 3 or 4 digits). This property is filled when parties communicate by means of short internal numbers, for example when calling to other extension or sending/receiving Company Pager message
	ExtensionNumber string `json:"extensionNumber,omitempty"`

	// Fax only. Error code returned in case of fax sending failure. Returned if messageStatus value is 'SendingFailed'
	FaxErrorCode string `json:"faxErrorCode,omitempty"`

	// Contains party location (city, state) if one can be determined from phoneNumber. This property is filled only when phoneNumber is not empty and server can calculate location information from it (for example, this information is unavailable for US toll-free numbers)
	Location string `json:"location,omitempty"`

	// Status of a message. Returned for outbound fax messages only
	MessageStatus string `json:"messageStatus,omitempty"`

	// Symbolic name associated with a party. If the phone does not belong to the known extension, only the location is returned, the name is not determined then
	Name string `json:"name,omitempty"`

	// Phone number of a party. Usually it is a plain number including country and area code like 18661234567. But sometimes it could be returned from database with some formatting applied, for example (866)123-4567. This property is filled in all cases where parties communicate by means of global phone numbers, for example when calling to direct numbers or sending/receiving SMS
	PhoneNumber string `json:"phoneNumber,omitempty"`
}

// Validate validates this message info caller info
func (m *MessageInfoCallerInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFaxErrorCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMessageStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var messageInfoCallerInfoTypeFaxErrorCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Undefined","NoFaxSendPermission","NoInternationalPermission","NoFaxMachine","OutgoingCallError","RenderingFailed","TooManyPages","ReturnToDBQueue","NoCallTime","WrongNumber","ProhibitedNumber","InternalError","FaxSendingProhibited","ThePhoneIsBlacklisted","UserNotFound","ConvertError","DBGeneralError","SkypeBillingFailed","AccountSuspended","ProhibitedDestination","InternationalDisabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		messageInfoCallerInfoTypeFaxErrorCodePropEnum = append(messageInfoCallerInfoTypeFaxErrorCodePropEnum, v)
	}
}

const (
	// MessageInfoCallerInfoFaxErrorCodeUndefined captures enum value "Undefined"
	MessageInfoCallerInfoFaxErrorCodeUndefined string = "Undefined"
	// MessageInfoCallerInfoFaxErrorCodeNoFaxSendPermission captures enum value "NoFaxSendPermission"
	MessageInfoCallerInfoFaxErrorCodeNoFaxSendPermission string = "NoFaxSendPermission"
	// MessageInfoCallerInfoFaxErrorCodeNoInternationalPermission captures enum value "NoInternationalPermission"
	MessageInfoCallerInfoFaxErrorCodeNoInternationalPermission string = "NoInternationalPermission"
	// MessageInfoCallerInfoFaxErrorCodeNoFaxMachine captures enum value "NoFaxMachine"
	MessageInfoCallerInfoFaxErrorCodeNoFaxMachine string = "NoFaxMachine"
	// MessageInfoCallerInfoFaxErrorCodeOutgoingCallError captures enum value "OutgoingCallError"
	MessageInfoCallerInfoFaxErrorCodeOutgoingCallError string = "OutgoingCallError"
	// MessageInfoCallerInfoFaxErrorCodeRenderingFailed captures enum value "RenderingFailed"
	MessageInfoCallerInfoFaxErrorCodeRenderingFailed string = "RenderingFailed"
	// MessageInfoCallerInfoFaxErrorCodeTooManyPages captures enum value "TooManyPages"
	MessageInfoCallerInfoFaxErrorCodeTooManyPages string = "TooManyPages"
	// MessageInfoCallerInfoFaxErrorCodeReturnToDBQueue captures enum value "ReturnToDBQueue"
	MessageInfoCallerInfoFaxErrorCodeReturnToDBQueue string = "ReturnToDBQueue"
	// MessageInfoCallerInfoFaxErrorCodeNoCallTime captures enum value "NoCallTime"
	MessageInfoCallerInfoFaxErrorCodeNoCallTime string = "NoCallTime"
	// MessageInfoCallerInfoFaxErrorCodeWrongNumber captures enum value "WrongNumber"
	MessageInfoCallerInfoFaxErrorCodeWrongNumber string = "WrongNumber"
	// MessageInfoCallerInfoFaxErrorCodeProhibitedNumber captures enum value "ProhibitedNumber"
	MessageInfoCallerInfoFaxErrorCodeProhibitedNumber string = "ProhibitedNumber"
	// MessageInfoCallerInfoFaxErrorCodeInternalError captures enum value "InternalError"
	MessageInfoCallerInfoFaxErrorCodeInternalError string = "InternalError"
	// MessageInfoCallerInfoFaxErrorCodeFaxSendingProhibited captures enum value "FaxSendingProhibited"
	MessageInfoCallerInfoFaxErrorCodeFaxSendingProhibited string = "FaxSendingProhibited"
	// MessageInfoCallerInfoFaxErrorCodeThePhoneIsBlacklisted captures enum value "ThePhoneIsBlacklisted"
	MessageInfoCallerInfoFaxErrorCodeThePhoneIsBlacklisted string = "ThePhoneIsBlacklisted"
	// MessageInfoCallerInfoFaxErrorCodeUserNotFound captures enum value "UserNotFound"
	MessageInfoCallerInfoFaxErrorCodeUserNotFound string = "UserNotFound"
	// MessageInfoCallerInfoFaxErrorCodeConvertError captures enum value "ConvertError"
	MessageInfoCallerInfoFaxErrorCodeConvertError string = "ConvertError"
	// MessageInfoCallerInfoFaxErrorCodeDBGeneralError captures enum value "DBGeneralError"
	MessageInfoCallerInfoFaxErrorCodeDBGeneralError string = "DBGeneralError"
	// MessageInfoCallerInfoFaxErrorCodeSkypeBillingFailed captures enum value "SkypeBillingFailed"
	MessageInfoCallerInfoFaxErrorCodeSkypeBillingFailed string = "SkypeBillingFailed"
	// MessageInfoCallerInfoFaxErrorCodeAccountSuspended captures enum value "AccountSuspended"
	MessageInfoCallerInfoFaxErrorCodeAccountSuspended string = "AccountSuspended"
	// MessageInfoCallerInfoFaxErrorCodeProhibitedDestination captures enum value "ProhibitedDestination"
	MessageInfoCallerInfoFaxErrorCodeProhibitedDestination string = "ProhibitedDestination"
	// MessageInfoCallerInfoFaxErrorCodeInternationalDisabled captures enum value "InternationalDisabled"
	MessageInfoCallerInfoFaxErrorCodeInternationalDisabled string = "InternationalDisabled"
)

// prop value enum
func (m *MessageInfoCallerInfo) validateFaxErrorCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, messageInfoCallerInfoTypeFaxErrorCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MessageInfoCallerInfo) validateFaxErrorCode(formats strfmt.Registry) error {

	if swag.IsZero(m.FaxErrorCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateFaxErrorCodeEnum("faxErrorCode", "body", m.FaxErrorCode); err != nil {
		return err
	}

	return nil
}

var messageInfoCallerInfoTypeMessageStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Queued","Sent","Delivered","DeliveryFailed","SendingFailed","Received"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		messageInfoCallerInfoTypeMessageStatusPropEnum = append(messageInfoCallerInfoTypeMessageStatusPropEnum, v)
	}
}

const (
	// MessageInfoCallerInfoMessageStatusQueued captures enum value "Queued"
	MessageInfoCallerInfoMessageStatusQueued string = "Queued"
	// MessageInfoCallerInfoMessageStatusSent captures enum value "Sent"
	MessageInfoCallerInfoMessageStatusSent string = "Sent"
	// MessageInfoCallerInfoMessageStatusDelivered captures enum value "Delivered"
	MessageInfoCallerInfoMessageStatusDelivered string = "Delivered"
	// MessageInfoCallerInfoMessageStatusDeliveryFailed captures enum value "DeliveryFailed"
	MessageInfoCallerInfoMessageStatusDeliveryFailed string = "DeliveryFailed"
	// MessageInfoCallerInfoMessageStatusSendingFailed captures enum value "SendingFailed"
	MessageInfoCallerInfoMessageStatusSendingFailed string = "SendingFailed"
	// MessageInfoCallerInfoMessageStatusReceived captures enum value "Received"
	MessageInfoCallerInfoMessageStatusReceived string = "Received"
)

// prop value enum
func (m *MessageInfoCallerInfo) validateMessageStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, messageInfoCallerInfoTypeMessageStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MessageInfoCallerInfo) validateMessageStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.MessageStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateMessageStatusEnum("messageStatus", "body", m.MessageStatus); err != nil {
		return err
	}

	return nil
}
