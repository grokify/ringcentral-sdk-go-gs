package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DetailedPresenceEventActiveCallInfo detailed presence event active call info
// swagger:model DetailedPresenceEvent.ActiveCallInfo
type DetailedPresenceEventActiveCallInfo struct {

	// Call direction
	Direction string `json:"direction,omitempty"`

	// Phone number or extension number of a caller
	From string `json:"from,omitempty"`

	// Internal identifier of a call
	ID string `json:"id,omitempty"`

	// Internal identifier of a call session
	SessionID string `json:"sessionId,omitempty"`

	// Telephony call status. See Telephony Status Values for detailed status description
	TelephonyStatus string `json:"telephonyStatus,omitempty"`

	// Type of call termination. Supported for calls in 'NoCall' status. If the returned termination type is 'Intermediate' it means the call is not actually ended, the connection is established on one of the devices
	TerminationType string `json:"terminationType,omitempty"`

	// Phone number or extension number of a callee
	To string `json:"to,omitempty"`
}

// Validate validates this detailed presence event active call info
func (m *DetailedPresenceEventActiveCallInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTelephonyStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTerminationType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var detailedPresenceEventActiveCallInfoTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Inbound","Outbound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		detailedPresenceEventActiveCallInfoTypeDirectionPropEnum = append(detailedPresenceEventActiveCallInfoTypeDirectionPropEnum, v)
	}
}

const (
	// DetailedPresenceEventActiveCallInfoDirectionInbound captures enum value "Inbound"
	DetailedPresenceEventActiveCallInfoDirectionInbound string = "Inbound"
	// DetailedPresenceEventActiveCallInfoDirectionOutbound captures enum value "Outbound"
	DetailedPresenceEventActiveCallInfoDirectionOutbound string = "Outbound"
)

// prop value enum
func (m *DetailedPresenceEventActiveCallInfo) validateDirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, detailedPresenceEventActiveCallInfoTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DetailedPresenceEventActiveCallInfo) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

var detailedPresenceEventActiveCallInfoTypeTelephonyStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NoCall","CallConnected","Ringing","OnHold","ParkedCall"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		detailedPresenceEventActiveCallInfoTypeTelephonyStatusPropEnum = append(detailedPresenceEventActiveCallInfoTypeTelephonyStatusPropEnum, v)
	}
}

const (
	// DetailedPresenceEventActiveCallInfoTelephonyStatusNoCall captures enum value "NoCall"
	DetailedPresenceEventActiveCallInfoTelephonyStatusNoCall string = "NoCall"
	// DetailedPresenceEventActiveCallInfoTelephonyStatusCallConnected captures enum value "CallConnected"
	DetailedPresenceEventActiveCallInfoTelephonyStatusCallConnected string = "CallConnected"
	// DetailedPresenceEventActiveCallInfoTelephonyStatusRinging captures enum value "Ringing"
	DetailedPresenceEventActiveCallInfoTelephonyStatusRinging string = "Ringing"
	// DetailedPresenceEventActiveCallInfoTelephonyStatusOnHold captures enum value "OnHold"
	DetailedPresenceEventActiveCallInfoTelephonyStatusOnHold string = "OnHold"
	// DetailedPresenceEventActiveCallInfoTelephonyStatusParkedCall captures enum value "ParkedCall"
	DetailedPresenceEventActiveCallInfoTelephonyStatusParkedCall string = "ParkedCall"
)

// prop value enum
func (m *DetailedPresenceEventActiveCallInfo) validateTelephonyStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, detailedPresenceEventActiveCallInfoTypeTelephonyStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DetailedPresenceEventActiveCallInfo) validateTelephonyStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.TelephonyStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateTelephonyStatusEnum("telephonyStatus", "body", m.TelephonyStatus); err != nil {
		return err
	}

	return nil
}

var detailedPresenceEventActiveCallInfoTypeTerminationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Final","Intermediate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		detailedPresenceEventActiveCallInfoTypeTerminationTypePropEnum = append(detailedPresenceEventActiveCallInfoTypeTerminationTypePropEnum, v)
	}
}

const (
	// DetailedPresenceEventActiveCallInfoTerminationTypeFinal captures enum value "Final"
	DetailedPresenceEventActiveCallInfoTerminationTypeFinal string = "Final"
	// DetailedPresenceEventActiveCallInfoTerminationTypeIntermediate captures enum value "Intermediate"
	DetailedPresenceEventActiveCallInfoTerminationTypeIntermediate string = "Intermediate"
)

// prop value enum
func (m *DetailedPresenceEventActiveCallInfo) validateTerminationTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, detailedPresenceEventActiveCallInfoTypeTerminationTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DetailedPresenceEventActiveCallInfo) validateTerminationType(formats strfmt.Registry) error {

	if swag.IsZero(m.TerminationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTerminationTypeEnum("terminationType", "body", m.TerminationType); err != nil {
		return err
	}

	return nil
}
