package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PresenceInfo presence info
// swagger:model PresenceInfo
type PresenceInfo struct {

	// If 'True' enables other extensions to see the extension presence status
	AllowSeeMyPresence bool `json:"allowSeeMyPresence,omitempty"`

	// Extended DnD (Do not Disturb) status. Cannot be set for Department/Announcement/Voicemail (Take Messages Only)/Fax User/Shared Lines Group/Paging Only Group/IVR Menu/Application Extension/Park Location extensions. The 'DoNotAcceptDepartmentCalls' and 'TakeDepartmentCallsOnly' values are applicable only for extensions - members of a Department; if these values are set for department outsiders, the 400 Bad Request error code is returned. The 'TakeDepartmentCallsOnly' status can be set through the old RingCentral user interface and is available for some migrated accounts only.
	DndStatus string `json:"dndStatus,omitempty"`

	// Information on extension, for which this presence data is returned
	Extension *PresenceInfoExtensionInfo `json:"extension,omitempty"`

	// Custom status message (as previously published by user)
	Message string `json:"message,omitempty"`

	// If 'True' enables the extension user to pick up a monitored line on hold
	PickUpCallsOnHold bool `json:"pickUpCallsOnHold,omitempty"`

	// Aggregated presence status, calculated from a number of sources
	PresenceStatus string `json:"presenceStatus,omitempty"`

	// If 'True' enables to ring extension phone, if any user monitored by this extension is ringing
	RingOnMonitoredCall bool `json:"ringOnMonitoredCall,omitempty"`

	// Telephony presence status
	TelephonyStatus string `json:"telephonyStatus,omitempty"`

	// Canonical URI of a presence info resource
	URI string `json:"uri,omitempty"`

	// User-defined presence status (as previously published by the user)
	UserStatus string `json:"userStatus,omitempty"`
}

// Validate validates this presence info
func (m *PresenceInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDndStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExtension(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePresenceStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTelephonyStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var presenceInfoTypeDndStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TakeAllCalls","DoNotAcceptAnyCalls","DoNotAcceptDepartmentCalls","TakeDepartmentCallsOnly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		presenceInfoTypeDndStatusPropEnum = append(presenceInfoTypeDndStatusPropEnum, v)
	}
}

const (
	// PresenceInfoDndStatusTakeAllCalls captures enum value "TakeAllCalls"
	PresenceInfoDndStatusTakeAllCalls string = "TakeAllCalls"
	// PresenceInfoDndStatusDoNotAcceptAnyCalls captures enum value "DoNotAcceptAnyCalls"
	PresenceInfoDndStatusDoNotAcceptAnyCalls string = "DoNotAcceptAnyCalls"
	// PresenceInfoDndStatusDoNotAcceptDepartmentCalls captures enum value "DoNotAcceptDepartmentCalls"
	PresenceInfoDndStatusDoNotAcceptDepartmentCalls string = "DoNotAcceptDepartmentCalls"
	// PresenceInfoDndStatusTakeDepartmentCallsOnly captures enum value "TakeDepartmentCallsOnly"
	PresenceInfoDndStatusTakeDepartmentCallsOnly string = "TakeDepartmentCallsOnly"
)

// prop value enum
func (m *PresenceInfo) validateDndStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, presenceInfoTypeDndStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PresenceInfo) validateDndStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.DndStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateDndStatusEnum("dndStatus", "body", m.DndStatus); err != nil {
		return err
	}

	return nil
}

func (m *PresenceInfo) validateExtension(formats strfmt.Registry) error {

	if swag.IsZero(m.Extension) { // not required
		return nil
	}

	if m.Extension != nil {

		if err := m.Extension.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension")
			}
			return err
		}
	}

	return nil
}

var presenceInfoTypePresenceStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Offline","Busy","Available"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		presenceInfoTypePresenceStatusPropEnum = append(presenceInfoTypePresenceStatusPropEnum, v)
	}
}

const (
	// PresenceInfoPresenceStatusOffline captures enum value "Offline"
	PresenceInfoPresenceStatusOffline string = "Offline"
	// PresenceInfoPresenceStatusBusy captures enum value "Busy"
	PresenceInfoPresenceStatusBusy string = "Busy"
	// PresenceInfoPresenceStatusAvailable captures enum value "Available"
	PresenceInfoPresenceStatusAvailable string = "Available"
)

// prop value enum
func (m *PresenceInfo) validatePresenceStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, presenceInfoTypePresenceStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PresenceInfo) validatePresenceStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.PresenceStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validatePresenceStatusEnum("presenceStatus", "body", m.PresenceStatus); err != nil {
		return err
	}

	return nil
}

var presenceInfoTypeTelephonyStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NoCall","CallConnected","Ringing","OnHold","ParkedCall"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		presenceInfoTypeTelephonyStatusPropEnum = append(presenceInfoTypeTelephonyStatusPropEnum, v)
	}
}

const (
	// PresenceInfoTelephonyStatusNoCall captures enum value "NoCall"
	PresenceInfoTelephonyStatusNoCall string = "NoCall"
	// PresenceInfoTelephonyStatusCallConnected captures enum value "CallConnected"
	PresenceInfoTelephonyStatusCallConnected string = "CallConnected"
	// PresenceInfoTelephonyStatusRinging captures enum value "Ringing"
	PresenceInfoTelephonyStatusRinging string = "Ringing"
	// PresenceInfoTelephonyStatusOnHold captures enum value "OnHold"
	PresenceInfoTelephonyStatusOnHold string = "OnHold"
	// PresenceInfoTelephonyStatusParkedCall captures enum value "ParkedCall"
	PresenceInfoTelephonyStatusParkedCall string = "ParkedCall"
)

// prop value enum
func (m *PresenceInfo) validateTelephonyStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, presenceInfoTypeTelephonyStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PresenceInfo) validateTelephonyStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.TelephonyStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateTelephonyStatusEnum("telephonyStatus", "body", m.TelephonyStatus); err != nil {
		return err
	}

	return nil
}

var presenceInfoTypeUserStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Offline","Busy","Available"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		presenceInfoTypeUserStatusPropEnum = append(presenceInfoTypeUserStatusPropEnum, v)
	}
}

const (
	// PresenceInfoUserStatusOffline captures enum value "Offline"
	PresenceInfoUserStatusOffline string = "Offline"
	// PresenceInfoUserStatusBusy captures enum value "Busy"
	PresenceInfoUserStatusBusy string = "Busy"
	// PresenceInfoUserStatusAvailable captures enum value "Available"
	PresenceInfoUserStatusAvailable string = "Available"
)

// prop value enum
func (m *PresenceInfo) validateUserStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, presenceInfoTypeUserStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PresenceInfo) validateUserStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.UserStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserStatusEnum("userStatus", "body", m.UserStatus); err != nil {
		return err
	}

	return nil
}
