package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduleInfo schedule info
// swagger:model ScheduleInfo
type ScheduleInfo struct {

	// Specific data ranges
	Ranges *RangesInfo `json:"ranges,omitempty"`

	// The user's schedule specified for business hours or after hours; it can also be set/retrieved calling the corresponding method
	Ref string `json:"ref,omitempty"`

	// Weekly schedule
	WeeklyRanges *WeeklyScheduleInfo `json:"weeklyRanges,omitempty"`
}

// Validate validates this schedule info
func (m *ScheduleInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRanges(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRef(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWeeklyRanges(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleInfo) validateRanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Ranges) { // not required
		return nil
	}

	if m.Ranges != nil {

		if err := m.Ranges.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ranges")
			}
			return err
		}
	}

	return nil
}

var scheduleInfoTypeRefPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BusinessHours","AfterHours"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduleInfoTypeRefPropEnum = append(scheduleInfoTypeRefPropEnum, v)
	}
}

const (
	// ScheduleInfoRefBusinessHours captures enum value "BusinessHours"
	ScheduleInfoRefBusinessHours string = "BusinessHours"
	// ScheduleInfoRefAfterHours captures enum value "AfterHours"
	ScheduleInfoRefAfterHours string = "AfterHours"
)

// prop value enum
func (m *ScheduleInfo) validateRefEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, scheduleInfoTypeRefPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ScheduleInfo) validateRef(formats strfmt.Registry) error {

	if swag.IsZero(m.Ref) { // not required
		return nil
	}

	// value enum
	if err := m.validateRefEnum("ref", "body", m.Ref); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleInfo) validateWeeklyRanges(formats strfmt.Registry) error {

	if swag.IsZero(m.WeeklyRanges) { // not required
		return nil
	}

	if m.WeeklyRanges != nil {

		if err := m.WeeklyRanges.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weeklyRanges")
			}
			return err
		}
	}

	return nil
}
