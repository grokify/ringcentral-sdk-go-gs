package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExtensionInfoEvent extension info event
// swagger:model ExtensionInfoEvent
type ExtensionInfoEvent struct {

	// Type of extension info change
	EventType string `json:"eventType,omitempty"`

	// Internal identifier of an extension
	ExtensionID *string `json:"extensionId,omitempty"`
}

// Validate validates this extension info event
func (m *ExtensionInfoEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var extensionInfoEventTypeEventTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Update","Delete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		extensionInfoEventTypeEventTypePropEnum = append(extensionInfoEventTypeEventTypePropEnum, v)
	}
}

const (
	// ExtensionInfoEventEventTypeUpdate captures enum value "Update"
	ExtensionInfoEventEventTypeUpdate string = "Update"
	// ExtensionInfoEventEventTypeDelete captures enum value "Delete"
	ExtensionInfoEventEventTypeDelete string = "Delete"
)

// prop value enum
func (m *ExtensionInfoEvent) validateEventTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, extensionInfoEventTypeEventTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExtensionInfoEvent) validateEventType(formats strfmt.Registry) error {

	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEventTypeEnum("eventType", "body", m.EventType); err != nil {
		return err
	}

	return nil
}
