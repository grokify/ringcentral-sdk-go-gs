package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// InstantMessageEvent instant message event
// swagger:model InstantMessageEvent
type InstantMessageEvent struct {

	// Message attachment data
	Attachments []*InstantMessageAttachmentInfo `json:"attachments"`

	// Message availability status. The default value is 'Alive'
	Availability string `json:"availability,omitempty"`

	// Identifier of the conversation the message belongs to
	ConversationID string `json:"conversationId,omitempty"`

	// Message creation datetime in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z
	CreationTime strfmt.DateTime `json:"creationTime,omitempty"`

	// Message direction. The default value is 'Inbound'
	Direction string `json:"direction,omitempty"`

	// Message sender information
	From *InstantMessageEventCallerInfo `json:"from,omitempty"`

	// Internal identifier of a message
	ID string `json:"id,omitempty"`

	// The datetime when the message was modified in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z
	LastModifiedTime strfmt.DateTime `json:"lastModifiedTime,omitempty"`

	// Status of a message. The default value is 'Received'
	MessageStatus string `json:"messageStatus,omitempty"`

	// The default value is 'Normal'
	Priority string `json:"priority,omitempty"`

	// Status of a message. The default value is 'Unread'
	ReadStatus string `json:"readStatus,omitempty"`

	// Message subject. It replicates message text which is also returned as an attachment
	Subject string `json:"subject,omitempty"`

	// Message receiver(s) information
	To []*InstantMessageEventCallerInfo `json:"to"`

	// Type of a message. The default value is 'SMS'
	Type string `json:"type,omitempty"`
}

// Validate validates this instant message event
func (m *InstantMessageEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachments(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstantMessageEvent) validateAttachments(formats strfmt.Registry) error {

	if swag.IsZero(m.Attachments) { // not required
		return nil
	}

	for i := 0; i < len(m.Attachments); i++ {

		if swag.IsZero(m.Attachments[i]) { // not required
			continue
		}

		if m.Attachments[i] != nil {

			if err := m.Attachments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InstantMessageEvent) validateFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.From) { // not required
		return nil
	}

	if m.From != nil {

		if err := m.From.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("from")
			}
			return err
		}
	}

	return nil
}

func (m *InstantMessageEvent) validateTo(formats strfmt.Registry) error {

	if swag.IsZero(m.To) { // not required
		return nil
	}

	for i := 0; i < len(m.To); i++ {

		if swag.IsZero(m.To[i]) { // not required
			continue
		}

		if m.To[i] != nil {

			if err := m.To[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("to" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}
