package dictionary

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRestapiV10DictionaryCountryParams creates a new GetRestapiV10DictionaryCountryParams object
// with the default values initialized.
func NewGetRestapiV10DictionaryCountryParams() *GetRestapiV10DictionaryCountryParams {
	var ()
	return &GetRestapiV10DictionaryCountryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRestapiV10DictionaryCountryParamsWithTimeout creates a new GetRestapiV10DictionaryCountryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRestapiV10DictionaryCountryParamsWithTimeout(timeout time.Duration) *GetRestapiV10DictionaryCountryParams {
	var ()
	return &GetRestapiV10DictionaryCountryParams{

		timeout: timeout,
	}
}

// NewGetRestapiV10DictionaryCountryParamsWithContext creates a new GetRestapiV10DictionaryCountryParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRestapiV10DictionaryCountryParamsWithContext(ctx context.Context) *GetRestapiV10DictionaryCountryParams {
	var ()
	return &GetRestapiV10DictionaryCountryParams{

		Context: ctx,
	}
}

// NewGetRestapiV10DictionaryCountryParamsWithHTTPClient creates a new GetRestapiV10DictionaryCountryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRestapiV10DictionaryCountryParamsWithHTTPClient(client *http.Client) *GetRestapiV10DictionaryCountryParams {
	var ()
	return &GetRestapiV10DictionaryCountryParams{
		HTTPClient: client,
	}
}

/*GetRestapiV10DictionaryCountryParams contains all the parameters to send to the API endpoint
for the get restapi v10 dictionary country operation typically these are written to a http.Request
*/
type GetRestapiV10DictionaryCountryParams struct {

	/*LoginAllowed
	  Specifies whether login with the phone numbers of this country is enabled or not

	*/
	LoginAllowed *bool
	/*NumberSelling
	  Specifies if RingCentral sells phone numbers of this country

	*/
	NumberSelling *bool
	/*Page
	  Indicates the page number to retrieve. Only positive number values are allowed. Default value is '1'

	*/
	Page *int64
	/*PerPage
	  Indicates the page size (number of items). If not specified, the value is '100' by default

	*/
	PerPage *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get restapi v10 dictionary country params
func (o *GetRestapiV10DictionaryCountryParams) WithTimeout(timeout time.Duration) *GetRestapiV10DictionaryCountryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get restapi v10 dictionary country params
func (o *GetRestapiV10DictionaryCountryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get restapi v10 dictionary country params
func (o *GetRestapiV10DictionaryCountryParams) WithContext(ctx context.Context) *GetRestapiV10DictionaryCountryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get restapi v10 dictionary country params
func (o *GetRestapiV10DictionaryCountryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get restapi v10 dictionary country params
func (o *GetRestapiV10DictionaryCountryParams) WithHTTPClient(client *http.Client) *GetRestapiV10DictionaryCountryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get restapi v10 dictionary country params
func (o *GetRestapiV10DictionaryCountryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLoginAllowed adds the loginAllowed to the get restapi v10 dictionary country params
func (o *GetRestapiV10DictionaryCountryParams) WithLoginAllowed(loginAllowed *bool) *GetRestapiV10DictionaryCountryParams {
	o.SetLoginAllowed(loginAllowed)
	return o
}

// SetLoginAllowed adds the loginAllowed to the get restapi v10 dictionary country params
func (o *GetRestapiV10DictionaryCountryParams) SetLoginAllowed(loginAllowed *bool) {
	o.LoginAllowed = loginAllowed
}

// WithNumberSelling adds the numberSelling to the get restapi v10 dictionary country params
func (o *GetRestapiV10DictionaryCountryParams) WithNumberSelling(numberSelling *bool) *GetRestapiV10DictionaryCountryParams {
	o.SetNumberSelling(numberSelling)
	return o
}

// SetNumberSelling adds the numberSelling to the get restapi v10 dictionary country params
func (o *GetRestapiV10DictionaryCountryParams) SetNumberSelling(numberSelling *bool) {
	o.NumberSelling = numberSelling
}

// WithPage adds the page to the get restapi v10 dictionary country params
func (o *GetRestapiV10DictionaryCountryParams) WithPage(page *int64) *GetRestapiV10DictionaryCountryParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get restapi v10 dictionary country params
func (o *GetRestapiV10DictionaryCountryParams) SetPage(page *int64) {
	o.Page = page
}

// WithPerPage adds the perPage to the get restapi v10 dictionary country params
func (o *GetRestapiV10DictionaryCountryParams) WithPerPage(perPage *int64) *GetRestapiV10DictionaryCountryParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get restapi v10 dictionary country params
func (o *GetRestapiV10DictionaryCountryParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WriteToRequest writes these params to a swagger request
func (o *GetRestapiV10DictionaryCountryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LoginAllowed != nil {

		// query param loginAllowed
		var qrLoginAllowed bool
		if o.LoginAllowed != nil {
			qrLoginAllowed = *o.LoginAllowed
		}
		qLoginAllowed := swag.FormatBool(qrLoginAllowed)
		if qLoginAllowed != "" {
			if err := r.SetQueryParam("loginAllowed", qLoginAllowed); err != nil {
				return err
			}
		}

	}

	if o.NumberSelling != nil {

		// query param numberSelling
		var qrNumberSelling bool
		if o.NumberSelling != nil {
			qrNumberSelling = *o.NumberSelling
		}
		qNumberSelling := swag.FormatBool(qrNumberSelling)
		if qNumberSelling != "" {
			if err := r.SetQueryParam("numberSelling", qNumberSelling); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param perPage
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("perPage", qPerPage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
