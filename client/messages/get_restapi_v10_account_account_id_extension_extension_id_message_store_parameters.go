package messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams creates a new GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams object
// with the default values initialized.
func NewGetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams() *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	var (
		accountIDDefault   = string("~")
		extensionIDDefault = string("~")
	)
	return &GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams{
		AccountID:   accountIDDefault,
		ExtensionID: extensionIDDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParamsWithTimeout creates a new GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParamsWithTimeout(timeout time.Duration) *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	var (
		accountIDDefault   = string("~")
		extensionIDDefault = string("~")
	)
	return &GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams{
		AccountID:   accountIDDefault,
		ExtensionID: extensionIDDefault,

		timeout: timeout,
	}
}

// NewGetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParamsWithContext creates a new GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParamsWithContext(ctx context.Context) *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	var (
		accountIdDefault   = string("~")
		extensionIdDefault = string("~")
	)
	return &GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams{
		AccountID:   accountIdDefault,
		ExtensionID: extensionIdDefault,

		Context: ctx,
	}
}

// NewGetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParamsWithHTTPClient creates a new GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParamsWithHTTPClient(client *http.Client) *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	var (
		accountIdDefault   = string("~")
		extensionIdDefault = string("~")
	)
	return &GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams{
		AccountID:   accountIdDefault,
		ExtensionID: extensionIdDefault,
		HTTPClient:  client,
	}
}

/*GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams contains all the parameters to send to the API endpoint
for the get restapi v10 account account ID extension extension ID message store operation typically these are written to a http.Request
*/
type GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams struct {

	/*AccountID
	  Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session

	*/
	AccountID string
	/*Availability
	  Specifies the availability status for the resulting messages. Default value is 'Alive'. Multiple values are accepted

	*/
	Availability *string
	/*ConversationID
	  Specifies the conversation identifier for the resulting messages

	*/
	ConversationID *int64
	/*DateFrom
	  The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours

	*/
	DateFrom *strfmt.DateTime
	/*DateTo
	  The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time

	*/
	DateTo *strfmt.DateTime
	/*Direction
	  The direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted

	*/
	Direction *string
	/*DistinctConversations
	  If 'True', then the latest messages per every conversation ID are returned

	*/
	DistinctConversations *bool
	/*ExtensionID
	  Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session

	*/
	ExtensionID string
	/*MessageType
	  The type of the resulting messages. If not specified, all messages without message type filtering are returned. Multiple values are accepted

	*/
	MessageType *string
	/*Page
	  Indicates the page number to retrieve. Only positive number values are allowed. Default value is '1'

	*/
	Page *int64
	/*PerPage
	  Indicates the page size (number of items). If not specified, the value is '100' by default

	*/
	PerPage *int64
	/*PhoneNumber
	  The phone number. If specified, messages are returned for this particular phone number only

	*/
	PhoneNumber *string
	/*ReadStatus
	  The read status for the resulting messages. Multiple values are accepted

	*/
	ReadStatus *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) WithTimeout(timeout time.Duration) *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) WithContext(ctx context.Context) *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) WithHTTPClient(client *http.Client) *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) WithAccountID(accountID string) *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithAvailability adds the availability to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) WithAvailability(availability *string) *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	o.SetAvailability(availability)
	return o
}

// SetAvailability adds the availability to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) SetAvailability(availability *string) {
	o.Availability = availability
}

// WithConversationID adds the conversationID to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) WithConversationID(conversationID *int64) *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	o.SetConversationID(conversationID)
	return o
}

// SetConversationID adds the conversationId to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) SetConversationID(conversationID *int64) {
	o.ConversationID = conversationID
}

// WithDateFrom adds the dateFrom to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) WithDateFrom(dateFrom *strfmt.DateTime) *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	o.SetDateFrom(dateFrom)
	return o
}

// SetDateFrom adds the dateFrom to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) SetDateFrom(dateFrom *strfmt.DateTime) {
	o.DateFrom = dateFrom
}

// WithDateTo adds the dateTo to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) WithDateTo(dateTo *strfmt.DateTime) *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	o.SetDateTo(dateTo)
	return o
}

// SetDateTo adds the dateTo to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) SetDateTo(dateTo *strfmt.DateTime) {
	o.DateTo = dateTo
}

// WithDirection adds the direction to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) WithDirection(direction *string) *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	o.SetDirection(direction)
	return o
}

// SetDirection adds the direction to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) SetDirection(direction *string) {
	o.Direction = direction
}

// WithDistinctConversations adds the distinctConversations to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) WithDistinctConversations(distinctConversations *bool) *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	o.SetDistinctConversations(distinctConversations)
	return o
}

// SetDistinctConversations adds the distinctConversations to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) SetDistinctConversations(distinctConversations *bool) {
	o.DistinctConversations = distinctConversations
}

// WithExtensionID adds the extensionID to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) WithExtensionID(extensionID string) *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	o.SetExtensionID(extensionID)
	return o
}

// SetExtensionID adds the extensionId to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) SetExtensionID(extensionID string) {
	o.ExtensionID = extensionID
}

// WithMessageType adds the messageType to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) WithMessageType(messageType *string) *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	o.SetMessageType(messageType)
	return o
}

// SetMessageType adds the messageType to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) SetMessageType(messageType *string) {
	o.MessageType = messageType
}

// WithPage adds the page to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) WithPage(page *int64) *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) SetPage(page *int64) {
	o.Page = page
}

// WithPerPage adds the perPage to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) WithPerPage(perPage *int64) *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithPhoneNumber adds the phoneNumber to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) WithPhoneNumber(phoneNumber *string) *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	o.SetPhoneNumber(phoneNumber)
	return o
}

// SetPhoneNumber adds the phoneNumber to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) SetPhoneNumber(phoneNumber *string) {
	o.PhoneNumber = phoneNumber
}

// WithReadStatus adds the readStatus to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) WithReadStatus(readStatus *string) *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams {
	o.SetReadStatus(readStatus)
	return o
}

// SetReadStatus adds the readStatus to the get restapi v10 account account ID extension extension ID message store params
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) SetReadStatus(readStatus *string) {
	o.ReadStatus = readStatus
}

// WriteToRequest writes these params to a swagger request
func (o *GetRestapiV10AccountAccountIDExtensionExtensionIDMessageStoreParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", o.AccountID); err != nil {
		return err
	}

	if o.Availability != nil {

		// query param availability
		var qrAvailability string
		if o.Availability != nil {
			qrAvailability = *o.Availability
		}
		qAvailability := qrAvailability
		if qAvailability != "" {
			if err := r.SetQueryParam("availability", qAvailability); err != nil {
				return err
			}
		}

	}

	if o.ConversationID != nil {

		// query param conversationId
		var qrConversationID int64
		if o.ConversationID != nil {
			qrConversationID = *o.ConversationID
		}
		qConversationID := swag.FormatInt64(qrConversationID)
		if qConversationID != "" {
			if err := r.SetQueryParam("conversationId", qConversationID); err != nil {
				return err
			}
		}

	}

	if o.DateFrom != nil {

		// query param dateFrom
		var qrDateFrom strfmt.DateTime
		if o.DateFrom != nil {
			qrDateFrom = *o.DateFrom
		}
		qDateFrom := qrDateFrom.String()
		if qDateFrom != "" {
			if err := r.SetQueryParam("dateFrom", qDateFrom); err != nil {
				return err
			}
		}

	}

	if o.DateTo != nil {

		// query param dateTo
		var qrDateTo strfmt.DateTime
		if o.DateTo != nil {
			qrDateTo = *o.DateTo
		}
		qDateTo := qrDateTo.String()
		if qDateTo != "" {
			if err := r.SetQueryParam("dateTo", qDateTo); err != nil {
				return err
			}
		}

	}

	if o.Direction != nil {

		// query param direction
		var qrDirection string
		if o.Direction != nil {
			qrDirection = *o.Direction
		}
		qDirection := qrDirection
		if qDirection != "" {
			if err := r.SetQueryParam("direction", qDirection); err != nil {
				return err
			}
		}

	}

	if o.DistinctConversations != nil {

		// query param distinctConversations
		var qrDistinctConversations bool
		if o.DistinctConversations != nil {
			qrDistinctConversations = *o.DistinctConversations
		}
		qDistinctConversations := swag.FormatBool(qrDistinctConversations)
		if qDistinctConversations != "" {
			if err := r.SetQueryParam("distinctConversations", qDistinctConversations); err != nil {
				return err
			}
		}

	}

	// path param extensionId
	if err := r.SetPathParam("extensionId", o.ExtensionID); err != nil {
		return err
	}

	if o.MessageType != nil {

		// query param messageType
		var qrMessageType string
		if o.MessageType != nil {
			qrMessageType = *o.MessageType
		}
		qMessageType := qrMessageType
		if qMessageType != "" {
			if err := r.SetQueryParam("messageType", qMessageType); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param perPage
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("perPage", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.PhoneNumber != nil {

		// query param phoneNumber
		var qrPhoneNumber string
		if o.PhoneNumber != nil {
			qrPhoneNumber = *o.PhoneNumber
		}
		qPhoneNumber := qrPhoneNumber
		if qPhoneNumber != "" {
			if err := r.SetQueryParam("phoneNumber", qPhoneNumber); err != nil {
				return err
			}
		}

	}

	if o.ReadStatus != nil {

		// query param readStatus
		var qrReadStatus string
		if o.ReadStatus != nil {
			qrReadStatus = *o.ReadStatus
		}
		qReadStatus := qrReadStatus
		if qReadStatus != "" {
			if err := r.SetQueryParam("readStatus", qReadStatus); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
