package phone_number_pool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostRestapiV10NumberPoolLookupParams creates a new PostRestapiV10NumberPoolLookupParams object
// with the default values initialized.
func NewPostRestapiV10NumberPoolLookupParams() *PostRestapiV10NumberPoolLookupParams {
	var ()
	return &PostRestapiV10NumberPoolLookupParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostRestapiV10NumberPoolLookupParamsWithTimeout creates a new PostRestapiV10NumberPoolLookupParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostRestapiV10NumberPoolLookupParamsWithTimeout(timeout time.Duration) *PostRestapiV10NumberPoolLookupParams {
	var ()
	return &PostRestapiV10NumberPoolLookupParams{

		timeout: timeout,
	}
}

// NewPostRestapiV10NumberPoolLookupParamsWithContext creates a new PostRestapiV10NumberPoolLookupParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostRestapiV10NumberPoolLookupParamsWithContext(ctx context.Context) *PostRestapiV10NumberPoolLookupParams {
	var ()
	return &PostRestapiV10NumberPoolLookupParams{

		Context: ctx,
	}
}

// NewPostRestapiV10NumberPoolLookupParamsWithHTTPClient creates a new PostRestapiV10NumberPoolLookupParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostRestapiV10NumberPoolLookupParamsWithHTTPClient(client *http.Client) *PostRestapiV10NumberPoolLookupParams {
	var ()
	return &PostRestapiV10NumberPoolLookupParams{
		HTTPClient: client,
	}
}

/*PostRestapiV10NumberPoolLookupParams contains all the parameters to send to the API endpoint
for the post restapi v10 number pool lookup operation typically these are written to a http.Request
*/
type PostRestapiV10NumberPoolLookupParams struct {

	/*AreaCode
	  Area code of the location

	*/
	AreaCode *int64
	/*CountryCode
	  Two-letter country code, complying with the ISO standard

	*/
	CountryCode *string
	/*CountryID
	  Internal identifier of a country; '1'- the US; '39' - Canada; '224' - the UK. The default value is '1'

	*/
	CountryID *string
	/*Exclude
	  A string of digits (one and more) that should not appear among the last four digits (line part) of the phone numbers that will be returned. It is possible to specify several exclude parameters. If specified, it is taken into account in all returned phone numbers both in the phone numbers satisfying to parameters of lookup and in alternative phone numbers (in case when extendedSearch is specified)

	*/
	Exclude *string
	/*ExtendedSearch
	  If the value is 'False', then the returned numbers exactly correspond to the specified NXX, NPA and LINE or countryCode, areaCode and numberPattern parameters. If the value is 'True', then the resulting numbers are ranked and returned with the rank attribute values (1-10). The default value is 'False'

	*/
	ExtendedSearch *bool
	/*Line
	  LINE pattern for vanity or wildcard search. Digits, Latin characters and asterisks are allowed (usually 4 characters)

	*/
	Line *string
	/*Npa
	  Area code (mandatory). For example, 800, 844, 855, 866, 877, 888 for North America; and 647 for Canada

	*/
	Npa *string
	/*NumberPattern
	  Phone number pattern (for wildcard or vanity search). For NANP countries (US, Canada) is concatenation of nxx (the first three digits) and line. If the first three characters are specified as not digits (e.g. 5** or CAT) then parameter extendedSearch will be ignored.

	*/
	NumberPattern *string
	/*Nxx
	  NXX pattern for vanity or wildcard search. Digits, Latin characters and asterisks are allowed (usually 3 characters)

	*/
	Nxx *string
	/*PaymentType
	  Payment type. Default is 'Local' (it should correlate with the npa provided)

	*/
	PaymentType *string
	/*PerPage
	  Indicates the page size (number of items). If not specified, the value is '10' by default

	*/
	PerPage *int64
	/*SmsEnabled
	  Specifies if SMS activation is available for the number. If specified, it is taken into account in all returned phone numbers both in the phone numbers satisfying to parameters of lookup and in alternative phone numbers (in case when extendedSearch is specified). If not specified, the value is null.

	*/
	SmsEnabled *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) WithTimeout(timeout time.Duration) *PostRestapiV10NumberPoolLookupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) WithContext(ctx context.Context) *PostRestapiV10NumberPoolLookupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) WithHTTPClient(client *http.Client) *PostRestapiV10NumberPoolLookupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAreaCode adds the areaCode to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) WithAreaCode(areaCode *int64) *PostRestapiV10NumberPoolLookupParams {
	o.SetAreaCode(areaCode)
	return o
}

// SetAreaCode adds the areaCode to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) SetAreaCode(areaCode *int64) {
	o.AreaCode = areaCode
}

// WithCountryCode adds the countryCode to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) WithCountryCode(countryCode *string) *PostRestapiV10NumberPoolLookupParams {
	o.SetCountryCode(countryCode)
	return o
}

// SetCountryCode adds the countryCode to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) SetCountryCode(countryCode *string) {
	o.CountryCode = countryCode
}

// WithCountryID adds the countryID to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) WithCountryID(countryID *string) *PostRestapiV10NumberPoolLookupParams {
	o.SetCountryID(countryID)
	return o
}

// SetCountryID adds the countryId to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) SetCountryID(countryID *string) {
	o.CountryID = countryID
}

// WithExclude adds the exclude to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) WithExclude(exclude *string) *PostRestapiV10NumberPoolLookupParams {
	o.SetExclude(exclude)
	return o
}

// SetExclude adds the exclude to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) SetExclude(exclude *string) {
	o.Exclude = exclude
}

// WithExtendedSearch adds the extendedSearch to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) WithExtendedSearch(extendedSearch *bool) *PostRestapiV10NumberPoolLookupParams {
	o.SetExtendedSearch(extendedSearch)
	return o
}

// SetExtendedSearch adds the extendedSearch to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) SetExtendedSearch(extendedSearch *bool) {
	o.ExtendedSearch = extendedSearch
}

// WithLine adds the line to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) WithLine(line *string) *PostRestapiV10NumberPoolLookupParams {
	o.SetLine(line)
	return o
}

// SetLine adds the line to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) SetLine(line *string) {
	o.Line = line
}

// WithNpa adds the npa to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) WithNpa(npa *string) *PostRestapiV10NumberPoolLookupParams {
	o.SetNpa(npa)
	return o
}

// SetNpa adds the npa to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) SetNpa(npa *string) {
	o.Npa = npa
}

// WithNumberPattern adds the numberPattern to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) WithNumberPattern(numberPattern *string) *PostRestapiV10NumberPoolLookupParams {
	o.SetNumberPattern(numberPattern)
	return o
}

// SetNumberPattern adds the numberPattern to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) SetNumberPattern(numberPattern *string) {
	o.NumberPattern = numberPattern
}

// WithNxx adds the nxx to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) WithNxx(nxx *string) *PostRestapiV10NumberPoolLookupParams {
	o.SetNxx(nxx)
	return o
}

// SetNxx adds the nxx to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) SetNxx(nxx *string) {
	o.Nxx = nxx
}

// WithPaymentType adds the paymentType to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) WithPaymentType(paymentType *string) *PostRestapiV10NumberPoolLookupParams {
	o.SetPaymentType(paymentType)
	return o
}

// SetPaymentType adds the paymentType to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) SetPaymentType(paymentType *string) {
	o.PaymentType = paymentType
}

// WithPerPage adds the perPage to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) WithPerPage(perPage *int64) *PostRestapiV10NumberPoolLookupParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithSmsEnabled adds the smsEnabled to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) WithSmsEnabled(smsEnabled *bool) *PostRestapiV10NumberPoolLookupParams {
	o.SetSmsEnabled(smsEnabled)
	return o
}

// SetSmsEnabled adds the smsEnabled to the post restapi v10 number pool lookup params
func (o *PostRestapiV10NumberPoolLookupParams) SetSmsEnabled(smsEnabled *bool) {
	o.SmsEnabled = smsEnabled
}

// WriteToRequest writes these params to a swagger request
func (o *PostRestapiV10NumberPoolLookupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AreaCode != nil {

		// query param areaCode
		var qrAreaCode int64
		if o.AreaCode != nil {
			qrAreaCode = *o.AreaCode
		}
		qAreaCode := swag.FormatInt64(qrAreaCode)
		if qAreaCode != "" {
			if err := r.SetQueryParam("areaCode", qAreaCode); err != nil {
				return err
			}
		}

	}

	if o.CountryCode != nil {

		// query param countryCode
		var qrCountryCode string
		if o.CountryCode != nil {
			qrCountryCode = *o.CountryCode
		}
		qCountryCode := qrCountryCode
		if qCountryCode != "" {
			if err := r.SetQueryParam("countryCode", qCountryCode); err != nil {
				return err
			}
		}

	}

	if o.CountryID != nil {

		// query param countryId
		var qrCountryID string
		if o.CountryID != nil {
			qrCountryID = *o.CountryID
		}
		qCountryID := qrCountryID
		if qCountryID != "" {
			if err := r.SetQueryParam("countryId", qCountryID); err != nil {
				return err
			}
		}

	}

	if o.Exclude != nil {

		// query param exclude
		var qrExclude string
		if o.Exclude != nil {
			qrExclude = *o.Exclude
		}
		qExclude := qrExclude
		if qExclude != "" {
			if err := r.SetQueryParam("exclude", qExclude); err != nil {
				return err
			}
		}

	}

	if o.ExtendedSearch != nil {

		// query param extendedSearch
		var qrExtendedSearch bool
		if o.ExtendedSearch != nil {
			qrExtendedSearch = *o.ExtendedSearch
		}
		qExtendedSearch := swag.FormatBool(qrExtendedSearch)
		if qExtendedSearch != "" {
			if err := r.SetQueryParam("extendedSearch", qExtendedSearch); err != nil {
				return err
			}
		}

	}

	if o.Line != nil {

		// query param line
		var qrLine string
		if o.Line != nil {
			qrLine = *o.Line
		}
		qLine := qrLine
		if qLine != "" {
			if err := r.SetQueryParam("line", qLine); err != nil {
				return err
			}
		}

	}

	if o.Npa != nil {

		// query param npa
		var qrNpa string
		if o.Npa != nil {
			qrNpa = *o.Npa
		}
		qNpa := qrNpa
		if qNpa != "" {
			if err := r.SetQueryParam("npa", qNpa); err != nil {
				return err
			}
		}

	}

	if o.NumberPattern != nil {

		// query param numberPattern
		var qrNumberPattern string
		if o.NumberPattern != nil {
			qrNumberPattern = *o.NumberPattern
		}
		qNumberPattern := qrNumberPattern
		if qNumberPattern != "" {
			if err := r.SetQueryParam("numberPattern", qNumberPattern); err != nil {
				return err
			}
		}

	}

	if o.Nxx != nil {

		// query param nxx
		var qrNxx string
		if o.Nxx != nil {
			qrNxx = *o.Nxx
		}
		qNxx := qrNxx
		if qNxx != "" {
			if err := r.SetQueryParam("nxx", qNxx); err != nil {
				return err
			}
		}

	}

	if o.PaymentType != nil {

		// query param paymentType
		var qrPaymentType string
		if o.PaymentType != nil {
			qrPaymentType = *o.PaymentType
		}
		qPaymentType := qrPaymentType
		if qPaymentType != "" {
			if err := r.SetQueryParam("paymentType", qPaymentType); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param perPage
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("perPage", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.SmsEnabled != nil {

		// query param smsEnabled
		var qrSmsEnabled bool
		if o.SmsEnabled != nil {
			qrSmsEnabled = *o.SmsEnabled
		}
		qSmsEnabled := swag.FormatBool(qrSmsEnabled)
		if qSmsEnabled != "" {
			if err := r.SetQueryParam("smsEnabled", qSmsEnabled); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
