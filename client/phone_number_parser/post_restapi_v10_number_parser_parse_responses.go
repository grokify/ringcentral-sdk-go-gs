package phone_number_parser

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/grokify/go-ringcentral/models"
)

// PostRestapiV10NumberParserParseReader is a Reader for the PostRestapiV10NumberParserParse structure.
type PostRestapiV10NumberParserParseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRestapiV10NumberParserParseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {

	result := NewPostRestapiV10NumberParserParseDefault(response.Code())
	if err := result.readResponse(response, consumer, o.formats); err != nil {
		return nil, err
	}
	if response.Code()/100 == 2 {
		return result, nil
	}
	return nil, result

}

// NewPostRestapiV10NumberParserParseDefault creates a PostRestapiV10NumberParserParseDefault with default headers values
func NewPostRestapiV10NumberParserParseDefault(code int) *PostRestapiV10NumberParserParseDefault {
	return &PostRestapiV10NumberParserParseDefault{
		_statusCode: code,
	}
}

/*PostRestapiV10NumberParserParseDefault handles this case with default header values.

OK
*/
type PostRestapiV10NumberParserParseDefault struct {
	_statusCode int

	Payload PostRestapiV10NumberParserParseDefaultBody
}

// Code gets the status code for the post restapi v10 number parser parse default response
func (o *PostRestapiV10NumberParserParseDefault) Code() int {
	return o._statusCode
}

func (o *PostRestapiV10NumberParserParseDefault) Error() string {
	return fmt.Sprintf("[POST /restapi/v1.0/number-parser/parse][%d] PostRestapiV10NumberParserParse default  %+v", o._statusCode, o.Payload)
}

func (o *PostRestapiV10NumberParserParseDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostRestapiV10NumberParserParseBody post restapi v10 number parser parse body
swagger:model PostRestapiV10NumberParserParseBody
*/
type PostRestapiV10NumberParserParseBody struct {

	// Phone numbers passed in a string. The maximum value of phone numbers is limited to 64. The maximum number of symbols in each phone number in a string is 64
	OriginalStrings []string `json:"originalStrings"`
}

/*PostRestapiV10NumberParserParseDefaultBody post restapi v10 number parser parse default body
swagger:model PostRestapiV10NumberParserParseDefaultBody
*/
type PostRestapiV10NumberParserParseDefaultBody struct {

	// Area code of the location (3-digit usually), according to the NANP number format, that can be summarized as NPA-NXX-xxxx and covers Canada, the United States, parts of the Caribbean Sea, and some Atlantic and Pacific islands. See North American Numbering Plan for details
	// Required: true
	AreaCode *string `json:"areaCode"`

	// Information on a country the phone number belongs to
	// Required: true
	Country []*models.ParsePhoneNumberCountryInfo `json:"country"`

	// Dialing format of a phone number
	// Required: true
	Dialable *string `json:"dialable"`

	// E.164 (11-digits) format of a phone number
	// Required: true
	E164 *string `json:"e164"`

	// International format of a phone number
	// Required: true
	FormattedInternational *string `json:"formattedInternational"`

	// Domestic format of a phone number
	// Required: true
	FormattedNational *string `json:"formattedNational"`

	// Information on a user home country
	// Required: true
	HomeCountry []*models.ParsePhoneNumberCountryInfo `json:"homeCountry"`

	// E.164 (11-digits) format of a phone number without the plus sign ('+')
	// Required: true
	Normalized *string `json:"normalized"`

	// One of the numbers to be parsed, passed as a string in response
	// Required: true
	OriginalString *string `json:"originalString"`

	// Parsed phone numbers data
	// Required: true
	PhoneNumbers []*models.ParsePhoneNumberPhoneNumberInfo `json:"phoneNumbers"`

	// "True" if the number is in a special format (for example N11 code)
	// Required: true
	Special *bool `json:"special"`

	// Canonical URI of a resource
	// Required: true
	URI *string `json:"uri"`
}

// Validate validates this post restapi v10 number parser parse default body
func (o *PostRestapiV10NumberParserParseDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAreaCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateDialable(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateE164(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateFormattedInternational(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateFormattedNational(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateHomeCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateNormalized(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateOriginalString(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validatePhoneNumbers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateSpecial(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateURI(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostRestapiV10NumberParserParseDefaultBody) validateAreaCode(formats strfmt.Registry) error {

	if err := validate.Required("PostRestapiV10NumberParserParse default"+"."+"areaCode", "body", o.AreaCode); err != nil {
		return err
	}

	return nil
}

func (o *PostRestapiV10NumberParserParseDefaultBody) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("PostRestapiV10NumberParserParse default"+"."+"country", "body", o.Country); err != nil {
		return err
	}

	for i := 0; i < len(o.Country); i++ {

		if swag.IsZero(o.Country[i]) { // not required
			continue
		}

		if o.Country[i] != nil {

			if err := o.Country[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PostRestapiV10NumberParserParse default" + "." + "country" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostRestapiV10NumberParserParseDefaultBody) validateDialable(formats strfmt.Registry) error {

	if err := validate.Required("PostRestapiV10NumberParserParse default"+"."+"dialable", "body", o.Dialable); err != nil {
		return err
	}

	return nil
}

func (o *PostRestapiV10NumberParserParseDefaultBody) validateE164(formats strfmt.Registry) error {

	if err := validate.Required("PostRestapiV10NumberParserParse default"+"."+"e164", "body", o.E164); err != nil {
		return err
	}

	return nil
}

func (o *PostRestapiV10NumberParserParseDefaultBody) validateFormattedInternational(formats strfmt.Registry) error {

	if err := validate.Required("PostRestapiV10NumberParserParse default"+"."+"formattedInternational", "body", o.FormattedInternational); err != nil {
		return err
	}

	return nil
}

func (o *PostRestapiV10NumberParserParseDefaultBody) validateFormattedNational(formats strfmt.Registry) error {

	if err := validate.Required("PostRestapiV10NumberParserParse default"+"."+"formattedNational", "body", o.FormattedNational); err != nil {
		return err
	}

	return nil
}

func (o *PostRestapiV10NumberParserParseDefaultBody) validateHomeCountry(formats strfmt.Registry) error {

	if err := validate.Required("PostRestapiV10NumberParserParse default"+"."+"homeCountry", "body", o.HomeCountry); err != nil {
		return err
	}

	for i := 0; i < len(o.HomeCountry); i++ {

		if swag.IsZero(o.HomeCountry[i]) { // not required
			continue
		}

		if o.HomeCountry[i] != nil {

			if err := o.HomeCountry[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PostRestapiV10NumberParserParse default" + "." + "homeCountry" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostRestapiV10NumberParserParseDefaultBody) validateNormalized(formats strfmt.Registry) error {

	if err := validate.Required("PostRestapiV10NumberParserParse default"+"."+"normalized", "body", o.Normalized); err != nil {
		return err
	}

	return nil
}

func (o *PostRestapiV10NumberParserParseDefaultBody) validateOriginalString(formats strfmt.Registry) error {

	if err := validate.Required("PostRestapiV10NumberParserParse default"+"."+"originalString", "body", o.OriginalString); err != nil {
		return err
	}

	return nil
}

func (o *PostRestapiV10NumberParserParseDefaultBody) validatePhoneNumbers(formats strfmt.Registry) error {

	if err := validate.Required("PostRestapiV10NumberParserParse default"+"."+"phoneNumbers", "body", o.PhoneNumbers); err != nil {
		return err
	}

	for i := 0; i < len(o.PhoneNumbers); i++ {

		if swag.IsZero(o.PhoneNumbers[i]) { // not required
			continue
		}

		if o.PhoneNumbers[i] != nil {

			if err := o.PhoneNumbers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PostRestapiV10NumberParserParse default" + "." + "phoneNumbers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostRestapiV10NumberParserParseDefaultBody) validateSpecial(formats strfmt.Registry) error {

	if err := validate.Required("PostRestapiV10NumberParserParse default"+"."+"special", "body", o.Special); err != nil {
		return err
	}

	return nil
}

func (o *PostRestapiV10NumberParserParseDefaultBody) validateURI(formats strfmt.Registry) error {

	if err := validate.Required("PostRestapiV10NumberParserParse default"+"."+"uri", "body", o.URI); err != nil {
		return err
	}

	return nil
}
